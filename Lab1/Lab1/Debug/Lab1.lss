
Lab1.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00000dc8  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80002e00  80002e00  00003200  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       0000010c  80003000  80003000  00003400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  8000310c  8000310c  0000350c  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         0000000c  00000008  80003110  00003808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  00000014  8000311c  00003814  2**0
                  ALLOC
  9 .bss          00000118  00000018  00000018  00000000  2**2
                  ALLOC
 10 .heap         0000eed0  00000130  00000130  00000000  2**0
                  ALLOC
 11 .comment      00000030  00000000  00000000  00003814  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 000006d8  00000000  00000000  00003848  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 00000f41  00000000  00000000  00003f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0000db20  00000000  00000000  00004e61  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00001721  00000000  00000000  00012981  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000054aa  00000000  00000000  000140a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000f78  00000000  00000000  0001954c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00002503  00000000  00000000  0001a4c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    0000241b  00000000  00000000  0001c9c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 00946458  00000000  00000000  0001ede2  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 22 .debug_ranges 00000778  00000000  00000000  00965240  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf d4 fc 	sub	pc,pc,-11012

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf f5 00 	sub	pc,pc,-2816

Disassembly of section .text:

80002008 <dip204_select>:
80002008:	d4 01       	pushm	lr
8000200a:	30 2b       	mov	r11,2
/*! \brief function to select the LCD
 *
 */
static void dip204_select(void)
{
  spi_selectChip(DIP204_SPI, DIP204_SPI_NPCS);
8000200c:	fe 7c 28 00 	mov	r12,-55296
80002010:	f0 1f 00 02 	mcall	80002018 <dip204_select+0x10>
}
80002014:	d8 02       	popm	pc
80002016:	00 00       	add	r0,r0
80002018:	80 00       	ld.sh	r0,r0[0x0]
8000201a:	27 f2       	sub	r2,127

8000201c <dip204_write_byte>:
 *
 *  \param  byte  Input. byte to write to the LCD (D7 .. D0)
 *
 */
static void dip204_write_byte(unsigned char byte)
{
8000201c:	eb cd 40 80 	pushm	r7,lr
  unsigned char reverse;

  switch (byte)
80002020:	f8 c8 ff f8 	sub	r8,r12,-8
80002024:	30 69       	mov	r9,6
80002026:	f2 08 18 00 	cp.b	r8,r9
8000202a:	e0 8b 00 0f 	brhi	80002048 <dip204_write_byte+0x2c>
8000202e:	30 19       	mov	r9,1
80002030:	f2 08 09 48 	lsl	r8,r9,r8
80002034:	e2 18 00 55 	andl	r8,0x55,COH
80002038:	c0 80       	breq	80002048 <dip204_write_byte+0x2c>
    {
      /* send D7 to D0 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, byte);
8000203a:	18 9b       	mov	r11,r12
8000203c:	fe 7c 28 00 	mov	r12,-55296
80002040:	f0 1f 00 0c 	mcall	80002070 <dip204_write_byte+0x54>
      Assert( SPI_OK==spi_status );
      break;
80002044:	e3 cd 80 80 	ldm	sp++,r7,pc
    }
    /* LSB first for all other data */
    default:
    {
      /* reverse byte */
      reverse = bit_reverse8(byte);
80002048:	5c 9c       	brev	r12
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
8000204a:	f8 07 16 18 	lsr	r7,r12,0x18
8000204e:	0e 9b       	mov	r11,r7
80002050:	e2 1b 00 f0 	andl	r11,0xf0,COH
80002054:	fe 7c 28 00 	mov	r12,-55296
80002058:	f0 1f 00 06 	mcall	80002070 <dip204_write_byte+0x54>
      Assert( SPI_OK==spi_status );
      /* send D4 to D7 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, ((reverse << 4) & 0xF0));
8000205c:	ee 0b 15 04 	lsl	r11,r7,0x4
80002060:	e2 1b 00 f0 	andl	r11,0xf0,COH
80002064:	fe 7c 28 00 	mov	r12,-55296
80002068:	f0 1f 00 02 	mcall	80002070 <dip204_write_byte+0x54>
8000206c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002070:	80 00       	ld.sh	r0,r0[0x0]
80002072:	29 22       	sub	r2,-110

80002074 <dip204_read_byte>:
 *
 *  \param  byte  Input. byte read from the LCD (D7 .. D0)
 *
 */
static void dip204_read_byte(unsigned char *byte)
{
80002074:	eb cd 40 c0 	pushm	r6-r7,lr
80002078:	20 1d       	sub	sp,4
8000207a:	18 96       	mov	r6,r12
  unsigned short reverse = 0x00;
8000207c:	fa c7 ff fc 	sub	r7,sp,-4
80002080:	30 08       	mov	r8,0
80002082:	0e e8       	st.h	--r7,r8

  /* dummy write */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_write(DIP204_SPI, 0x00);
80002084:	30 0b       	mov	r11,0
80002086:	fe 7c 28 00 	mov	r12,-55296
8000208a:	f0 1f 00 08 	mcall	800020a8 <dip204_read_byte+0x34>
  Assert( SPI_OK==spi_status );
  /* read RSR register */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_read(DIP204_SPI, &reverse);
8000208e:	0e 9b       	mov	r11,r7
80002090:	fe 7c 28 00 	mov	r12,-55296
80002094:	f0 1f 00 06 	mcall	800020ac <dip204_read_byte+0x38>
  Assert( SPI_OK==spi_status );
  /* Revert received byte (issued LSB first by the LCD) */
  *byte = bit_reverse8(reverse);
80002098:	1b b8       	ld.ub	r8,sp[0x3]
8000209a:	5c 98       	brev	r8
8000209c:	b9 88       	lsr	r8,0x18
8000209e:	ac 88       	st.b	r6[0x0],r8
}
800020a0:	2f fd       	sub	sp,-4
800020a2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800020a6:	00 00       	add	r0,r0
800020a8:	80 00       	ld.sh	r0,r0[0x0]
800020aa:	29 22       	sub	r2,-110
800020ac:	80 00       	ld.sh	r0,r0[0x0]
800020ae:	29 3e       	sub	lr,-109

800020b0 <dip204_wait_busy>:

/*! \brief function to wait for LCD becomes not busy
 *
 */
static void dip204_wait_busy(void)
{
800020b0:	eb cd 40 c0 	pushm	r6-r7,lr
800020b4:	20 1d       	sub	sp,4
  unsigned char status = 0x00;
800020b6:	fa c7 ff fc 	sub	r7,sp,-4
800020ba:	30 08       	mov	r8,0
800020bc:	0e f8       	st.b	--r7,r8

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
800020be:	e0 6c 00 fc 	mov	r12,252
800020c2:	f0 1f 00 07 	mcall	800020dc <dip204_wait_busy+0x2c>
  /* read next byte */
  do {
  dip204_read_byte(&status);
  /* keep D7 to know status */
  }while (status & 0x80);
800020c6:	30 06       	mov	r6,0

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
  /* read next byte */
  do {
  dip204_read_byte(&status);
800020c8:	0e 9c       	mov	r12,r7
800020ca:	f0 1f 00 06 	mcall	800020e0 <dip204_wait_busy+0x30>
  /* keep D7 to know status */
  }while (status & 0x80);
800020ce:	1b b8       	ld.ub	r8,sp[0x3]
800020d0:	ec 08 18 00 	cp.b	r8,r6
800020d4:	cf a5       	brlt	800020c8 <dip204_wait_busy+0x18>
}
800020d6:	2f fd       	sub	sp,-4
800020d8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800020dc:	80 00       	ld.sh	r0,r0[0x0]
800020de:	20 1c       	sub	r12,1
800020e0:	80 00       	ld.sh	r0,r0[0x0]
800020e2:	20 74       	sub	r4,7

800020e4 <dip204_unselect>:

/*! \brief function to unselect the LCD
 *
 */
static void dip204_unselect(void)
{
800020e4:	d4 01       	pushm	lr
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_unselectChip(DIP204_SPI, DIP204_SPI_NPCS);
800020e6:	30 2b       	mov	r11,2
800020e8:	fe 7c 28 00 	mov	r12,-55296
800020ec:	f0 1f 00 02 	mcall	800020f4 <dip204_unselect+0x10>
  Assert( SPI_OK==spi_status );
}
800020f0:	d8 02       	popm	pc
800020f2:	00 00       	add	r0,r0
800020f4:	80 00       	ld.sh	r0,r0[0x0]
800020f6:	28 3e       	sub	lr,-125

800020f8 <dip204_write_string>:
  dip204_unselect();
}


void dip204_write_string(const char *string)
{
800020f8:	eb cd 40 f8 	pushm	r3-r7,lr
800020fc:	18 94       	mov	r4,r12
  unsigned char i=0;

  dip204_select();
800020fe:	f0 1f 00 11 	mcall	80002140 <dip204_write_string+0x48>
  /* for all chars in string */
  while(string[i]!=0)
80002102:	09 89       	ld.ub	r9,r4[0x0]
80002104:	30 08       	mov	r8,0
80002106:	f0 09 18 00 	cp.b	r9,r8
8000210a:	c1 60       	breq	80002136 <dip204_write_string+0x3e>
8000210c:	08 96       	mov	r6,r4
8000210e:	30 07       	mov	r7,0
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
80002110:	e0 63 00 fa 	mov	r3,250
{
  unsigned char i=0;

  dip204_select();
  /* for all chars in string */
  while(string[i]!=0)
80002114:	10 95       	mov	r5,r8
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
80002116:	06 9c       	mov	r12,r3
80002118:	f0 1f 00 0b 	mcall	80002144 <dip204_write_string+0x4c>
    /* Send byte */
    dip204_write_byte(string[i]);
8000211c:	0d 8c       	ld.ub	r12,r6[0x0]
8000211e:	f0 1f 00 0a 	mcall	80002144 <dip204_write_string+0x4c>
    /* go to next char */
    i++;
80002122:	2f f7       	sub	r7,-1
80002124:	5c 57       	castu.b	r7
    dip204_wait_busy();
80002126:	f0 1f 00 09 	mcall	80002148 <dip204_write_string+0x50>
{
  unsigned char i=0;

  dip204_select();
  /* for all chars in string */
  while(string[i]!=0)
8000212a:	e8 07 00 06 	add	r6,r4,r7
8000212e:	0d 88       	ld.ub	r8,r6[0x0]
80002130:	ea 08 18 00 	cp.b	r8,r5
80002134:	cf 11       	brne	80002116 <dip204_write_string+0x1e>
    dip204_write_byte(string[i]);
    /* go to next char */
    i++;
    dip204_wait_busy();
  }
  dip204_unselect();
80002136:	f0 1f 00 06 	mcall	8000214c <dip204_write_string+0x54>
}
8000213a:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
8000213e:	00 00       	add	r0,r0
80002140:	80 00       	ld.sh	r0,r0[0x0]
80002142:	20 08       	sub	r8,0
80002144:	80 00       	ld.sh	r0,r0[0x0]
80002146:	20 1c       	sub	r12,1
80002148:	80 00       	ld.sh	r0,r0[0x0]
8000214a:	20 b0       	sub	r0,11
8000214c:	80 00       	ld.sh	r0,r0[0x0]
8000214e:	20 e4       	sub	r4,14

80002150 <dip204_set_cursor_position>:
  dip204_set_cursor_position(column, line);
}


void dip204_set_cursor_position(unsigned char column, unsigned char line)
{
80002150:	eb cd 40 c0 	pushm	r6-r7,lr
80002154:	18 96       	mov	r6,r12
80002156:	16 97       	mov	r7,r11
  unsigned char address = 0;

  dip204_select();
80002158:	f0 1f 00 11 	mcall	8000219c <dip204_set_cursor_position+0x4c>
  if ((column <= 20) && (line <= 4))
8000215c:	31 48       	mov	r8,20
8000215e:	f0 06 18 00 	cp.b	r6,r8
80002162:	5f 89       	srls	r9
80002164:	30 48       	mov	r8,4
80002166:	f0 07 18 00 	cp.b	r7,r8
8000216a:	5f 88       	srls	r8
8000216c:	f3 e8 00 08 	and	r8,r9,r8
80002170:	c0 31       	brne	80002176 <dip204_set_cursor_position+0x26>
80002172:	30 06       	mov	r6,0
80002174:	c0 68       	rjmp	80002180 <dip204_set_cursor_position+0x30>
  {
    /* Calculate DDRAM address from line and row values */
    address = ( (line-1) * 32 ) + ( column-1 ) + 128;
80002176:	28 16       	sub	r6,-127
80002178:	20 17       	sub	r7,1
8000217a:	a5 77       	lsl	r7,0x5
8000217c:	0e 06       	add	r6,r7
8000217e:	5c 56       	castu.b	r6
  }
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002180:	e0 6c 00 f8 	mov	r12,248
80002184:	f0 1f 00 07 	mcall	800021a0 <dip204_set_cursor_position+0x50>
  /* Send Address lower Nibble */
  dip204_write_byte(address);
80002188:	0c 9c       	mov	r12,r6
8000218a:	f0 1f 00 06 	mcall	800021a0 <dip204_set_cursor_position+0x50>
  dip204_wait_busy();
8000218e:	f0 1f 00 06 	mcall	800021a4 <dip204_set_cursor_position+0x54>
  dip204_unselect();
80002192:	f0 1f 00 06 	mcall	800021a8 <dip204_set_cursor_position+0x58>
}
80002196:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000219a:	00 00       	add	r0,r0
8000219c:	80 00       	ld.sh	r0,r0[0x0]
8000219e:	20 08       	sub	r8,0
800021a0:	80 00       	ld.sh	r0,r0[0x0]
800021a2:	20 1c       	sub	r12,1
800021a4:	80 00       	ld.sh	r0,r0[0x0]
800021a6:	20 b0       	sub	r0,11
800021a8:	80 00       	ld.sh	r0,r0[0x0]
800021aa:	20 e4       	sub	r4,14

800021ac <dip204_write_data>:
  dip204_unselect();
}


void dip204_write_data(unsigned char data)
{
800021ac:	eb cd 40 80 	pushm	r7,lr
800021b0:	18 97       	mov	r7,r12
  dip204_select();
800021b2:	f0 1f 00 08 	mcall	800021d0 <dip204_write_data+0x24>
  /* Send Write Data Start-Byte */
  dip204_write_byte(DIP204_WRITE_DATA);
800021b6:	e0 6c 00 fa 	mov	r12,250
800021ba:	f0 1f 00 07 	mcall	800021d4 <dip204_write_data+0x28>
  /* send data */
  dip204_write_byte(data);
800021be:	0e 9c       	mov	r12,r7
800021c0:	f0 1f 00 05 	mcall	800021d4 <dip204_write_data+0x28>
  dip204_wait_busy();
800021c4:	f0 1f 00 05 	mcall	800021d8 <dip204_write_data+0x2c>
  dip204_unselect();
800021c8:	f0 1f 00 05 	mcall	800021dc <dip204_write_data+0x30>
}
800021cc:	e3 cd 80 80 	ldm	sp++,r7,pc
800021d0:	80 00       	ld.sh	r0,r0[0x0]
800021d2:	20 08       	sub	r8,0
800021d4:	80 00       	ld.sh	r0,r0[0x0]
800021d6:	20 1c       	sub	r12,1
800021d8:	80 00       	ld.sh	r0,r0[0x0]
800021da:	20 b0       	sub	r0,11
800021dc:	80 00       	ld.sh	r0,r0[0x0]
800021de:	20 e4       	sub	r4,14

800021e0 <dip204_init>:


/****************************** global functions *****************************/

void dip204_init(backlight_options option, bool backlight_on)
{
800021e0:	eb cd 40 80 	pushm	r7,lr
800021e4:	20 4d       	sub	sp,16
800021e6:	16 97       	mov	r7,r11
  pwm_opt_t pwm_opt;  // pwm option config

  if (option == backlight_PWM)
800021e8:	58 1c       	cp.w	r12,1
800021ea:	c3 01       	brne	8000224a <dip204_init+0x6a>
  {
    channel_id = DIP204_PWM_CHANNEL;
800021ec:	30 69       	mov	r9,6
800021ee:	4f 88       	lddpc	r8,800023cc <dip204_init+0x1ec>
800021f0:	91 09       	st.w	r8[0x0],r9
    gpio_enable_module_pin(DIP204_PWM_PIN, DIP204_PWM_FUNCTION);
800021f2:	30 2b       	mov	r11,2
800021f4:	33 2c       	mov	r12,50
800021f6:	f0 1f 00 77 	mcall	800023d0 <dip204_init+0x1f0>

    // PWM controller configuration
    pwm_opt.diva=0;
800021fa:	30 08       	mov	r8,0
800021fc:	50 18       	stdsp	sp[0x4],r8
    pwm_opt.divb=0;
800021fe:	50 08       	stdsp	sp[0x0],r8
    pwm_opt.prea=0;
80002200:	50 38       	stdsp	sp[0xc],r8
    pwm_opt.preb=0;
80002202:	50 28       	stdsp	sp[0x8],r8

    pwm_init(&pwm_opt);
80002204:	1a 9c       	mov	r12,sp
80002206:	f0 1f 00 74 	mcall	800023d4 <dip204_init+0x1f4>
    pwm_duty = (backlight_on) ? DIP204_PERIOD_MAX - 1 : 1;
8000220a:	58 07       	cp.w	r7,0
8000220c:	f9 b7 01 31 	movne	r7,49
80002210:	f9 b7 00 01 	moveq	r7,1
80002214:	4f 18       	lddpc	r8,800023d8 <dip204_init+0x1f8>
80002216:	b0 07       	st.h	r8[0x0],r7
    pwm_channel.CMR.calg = PWM_MODE_LEFT_ALIGNED;   // channel mode
80002218:	4f 1b       	lddpc	r11,800023dc <dip204_init+0x1fc>
8000221a:	76 08       	ld.w	r8,r11[0x0]
    pwm_channel.CMR.cpol = PWM_POLARITY_LOW;   // channel polarity
    pwm_channel.CMR.cpd = PWM_UPDATE_PERIOD;   // not used the first time
8000221c:	e0 18 fc ff 	andl	r8,0xfcff
    pwm_channel.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_256;   // channel prescaler
80002220:	ab a8       	sbr	r8,0xa
80002222:	30 89       	mov	r9,8
80002224:	f1 d9 d0 04 	bfins	r8,r9,0x0,0x4
80002228:	97 08       	st.w	r11[0x0],r8
    pwm_channel.cdty = pwm_duty;  // channel duty cycle, should be < CPRD
8000222a:	97 17       	st.w	r11[0x4],r7
    pwm_channel.cprd = DIP204_PERIOD_MAX;  // channel period
8000222c:	33 28       	mov	r8,50
8000222e:	97 28       	st.w	r11[0x8],r8
    pwm_channel.cupd = 0;  // channel update is not used here.
80002230:	30 08       	mov	r8,0
80002232:	97 48       	st.w	r11[0x10],r8

    pwm_channel_init(channel_id, &pwm_channel);
80002234:	4e 67       	lddpc	r7,800023cc <dip204_init+0x1ec>
80002236:	6e 0c       	ld.w	r12,r7[0x0]
80002238:	f0 1f 00 6a 	mcall	800023e0 <dip204_init+0x200>
    // start PWM
    pwm_start_channels(1 << channel_id);
8000223c:	6e 08       	ld.w	r8,r7[0x0]
8000223e:	30 1c       	mov	r12,1
80002240:	f8 08 09 4c 	lsl	r12,r12,r8
80002244:	f0 1f 00 68 	mcall	800023e4 <dip204_init+0x204>
80002248:	c0 a8       	rjmp	8000225c <dip204_init+0x7c>
  }
  else
  {
    if (backlight_on)
8000224a:	58 0b       	cp.w	r11,0
8000224c:	c0 50       	breq	80002256 <dip204_init+0x76>
    {
      gpio_clr_gpio_pin(DIP204_BACKLIGHT_PIN);
8000224e:	33 2c       	mov	r12,50
80002250:	f0 1f 00 66 	mcall	800023e8 <dip204_init+0x208>
80002254:	c0 48       	rjmp	8000225c <dip204_init+0x7c>
    }
    else
    {
      gpio_set_gpio_pin(DIP204_BACKLIGHT_PIN);
80002256:	33 2c       	mov	r12,50
80002258:	f0 1f 00 65 	mcall	800023ec <dip204_init+0x20c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000225c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002260:	f0 ca f7 00 	sub	r10,r8,-2304
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002264:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002268:	14 38       	cp.w	r8,r10
8000226a:	e0 88 00 08 	brls	8000227a <dip204_init+0x9a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000226e:	12 38       	cp.w	r8,r9
80002270:	fe 98 ff fa 	brls	80002264 <dip204_init+0x84>
80002274:	12 3a       	cp.w	r10,r9
80002276:	c6 e3       	brcs	80002352 <dip204_init+0x172>
80002278:	cf 6b       	rjmp	80002264 <dip204_init+0x84>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000227a:	12 38       	cp.w	r8,r9
8000227c:	e0 8b 00 6b 	brhi	80002352 <dip204_init+0x172>
80002280:	12 3a       	cp.w	r10,r9
80002282:	c6 83       	brcs	80002352 <dip204_init+0x172>
80002284:	cf 0b       	rjmp	80002264 <dip204_init+0x84>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002286:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000228a:	14 38       	cp.w	r8,r10
8000228c:	e0 88 00 08 	brls	8000229c <dip204_init+0xbc>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002290:	12 38       	cp.w	r8,r9
80002292:	fe 98 ff fa 	brls	80002286 <dip204_init+0xa6>
80002296:	12 3a       	cp.w	r10,r9
80002298:	c6 b3       	brcs	8000236e <dip204_init+0x18e>
8000229a:	cf 6b       	rjmp	80002286 <dip204_init+0xa6>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000229c:	12 38       	cp.w	r8,r9
8000229e:	e0 8b 00 68 	brhi	8000236e <dip204_init+0x18e>
800022a2:	12 3a       	cp.w	r10,r9
800022a4:	c6 53       	brcs	8000236e <dip204_init+0x18e>
800022a6:	cf 0b       	rjmp	80002286 <dip204_init+0xa6>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800022a8:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800022ac:	14 38       	cp.w	r8,r10
800022ae:	e0 88 00 08 	brls	800022be <dip204_init+0xde>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800022b2:	12 38       	cp.w	r8,r9
800022b4:	fe 98 ff fa 	brls	800022a8 <dip204_init+0xc8>
800022b8:	12 3a       	cp.w	r10,r9
800022ba:	c6 23       	brcs	8000237e <dip204_init+0x19e>
800022bc:	cf 6b       	rjmp	800022a8 <dip204_init+0xc8>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800022be:	12 38       	cp.w	r8,r9
800022c0:	e0 8b 00 5f 	brhi	8000237e <dip204_init+0x19e>
800022c4:	12 3a       	cp.w	r10,r9
800022c6:	c5 c3       	brcs	8000237e <dip204_init+0x19e>
800022c8:	cf 0b       	rjmp	800022a8 <dip204_init+0xc8>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800022ca:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800022ce:	14 38       	cp.w	r8,r10
800022d0:	e0 88 00 08 	brls	800022e0 <dip204_init+0x100>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800022d4:	12 38       	cp.w	r8,r9
800022d6:	fe 98 ff fa 	brls	800022ca <dip204_init+0xea>
800022da:	12 3a       	cp.w	r10,r9
800022dc:	c5 93       	brcs	8000238e <dip204_init+0x1ae>
800022de:	cf 6b       	rjmp	800022ca <dip204_init+0xea>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800022e0:	12 38       	cp.w	r8,r9
800022e2:	e0 8b 00 56 	brhi	8000238e <dip204_init+0x1ae>
800022e6:	12 3a       	cp.w	r10,r9
800022e8:	c5 33       	brcs	8000238e <dip204_init+0x1ae>
800022ea:	cf 0b       	rjmp	800022ca <dip204_init+0xea>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800022ec:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800022f0:	14 38       	cp.w	r8,r10
800022f2:	e0 88 00 08 	brls	80002302 <dip204_init+0x122>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800022f6:	12 38       	cp.w	r8,r9
800022f8:	fe 98 ff fa 	brls	800022ec <dip204_init+0x10c>
800022fc:	12 3a       	cp.w	r10,r9
800022fe:	c5 03       	brcs	8000239e <dip204_init+0x1be>
80002300:	cf 6b       	rjmp	800022ec <dip204_init+0x10c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002302:	12 38       	cp.w	r8,r9
80002304:	e0 8b 00 4d 	brhi	8000239e <dip204_init+0x1be>
80002308:	12 3a       	cp.w	r10,r9
8000230a:	c4 a3       	brcs	8000239e <dip204_init+0x1be>
8000230c:	cf 0b       	rjmp	800022ec <dip204_init+0x10c>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000230e:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002312:	14 38       	cp.w	r8,r10
80002314:	e0 88 00 08 	brls	80002324 <dip204_init+0x144>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002318:	12 38       	cp.w	r8,r9
8000231a:	fe 98 ff fa 	brls	8000230e <dip204_init+0x12e>
8000231e:	12 3a       	cp.w	r10,r9
80002320:	c4 73       	brcs	800023ae <dip204_init+0x1ce>
80002322:	cf 6b       	rjmp	8000230e <dip204_init+0x12e>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002324:	12 38       	cp.w	r8,r9
80002326:	e0 8b 00 44 	brhi	800023ae <dip204_init+0x1ce>
8000232a:	12 3a       	cp.w	r10,r9
8000232c:	c4 13       	brcs	800023ae <dip204_init+0x1ce>
8000232e:	cf 0b       	rjmp	8000230e <dip204_init+0x12e>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002330:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002334:	14 38       	cp.w	r8,r10
80002336:	e0 88 00 08 	brls	80002346 <dip204_init+0x166>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000233a:	12 38       	cp.w	r8,r9
8000233c:	fe 98 ff fa 	brls	80002330 <dip204_init+0x150>
80002340:	12 3a       	cp.w	r10,r9
80002342:	c3 e3       	brcs	800023be <dip204_init+0x1de>
80002344:	cf 6b       	rjmp	80002330 <dip204_init+0x150>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002346:	12 38       	cp.w	r8,r9
80002348:	e0 8b 00 3b 	brhi	800023be <dip204_init+0x1de>
8000234c:	12 3a       	cp.w	r10,r9
8000234e:	c3 83       	brcs	800023be <dip204_init+0x1de>
80002350:	cf 0b       	rjmp	80002330 <dip204_init+0x150>
    }
  }
  // delay for power on
  delay_ms(20);
  // select the LCD chip
  dip204_select();
80002352:	f0 1f 00 28 	mcall	800023f0 <dip204_init+0x210>
  // Send Command Start Byte
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002356:	e0 6c 00 f8 	mov	r12,248
8000235a:	f0 1f 00 27 	mcall	800023f4 <dip204_init+0x214>
  // Send "extended Function Set" Command  (RE=1)
  dip204_write_byte(0x34);
8000235e:	33 4c       	mov	r12,52
80002360:	f0 1f 00 25 	mcall	800023f4 <dip204_init+0x214>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002364:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002368:	f0 ca ff 8c 	sub	r10,r8,-116
8000236c:	c8 db       	rjmp	80002286 <dip204_init+0xa6>
  // Wait for command execution
  delay_ms(1);
  // Send "Enter 4-Line Mode" Command
  dip204_write_byte(0x09);
8000236e:	30 9c       	mov	r12,9
80002370:	f0 1f 00 21 	mcall	800023f4 <dip204_init+0x214>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002374:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002378:	f0 ca ff 8c 	sub	r10,r8,-116
8000237c:	c9 6b       	rjmp	800022a8 <dip204_init+0xc8>
  // Wait for command execution
  delay_ms(1);
  // Send "Function Set" Command (RE=0)
  dip204_write_byte(0x30);
8000237e:	33 0c       	mov	r12,48
80002380:	f0 1f 00 1d 	mcall	800023f4 <dip204_init+0x214>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002384:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002388:	f0 ca ff 8c 	sub	r10,r8,-116
8000238c:	c9 fb       	rjmp	800022ca <dip204_init+0xea>
  // Wait for command execution
  delay_ms(1);
  // Send "Display On Command: Display On, Cursor On, Blink On"
  dip204_write_byte(0x0F);
8000238e:	30 fc       	mov	r12,15
80002390:	f0 1f 00 19 	mcall	800023f4 <dip204_init+0x214>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002394:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002398:	f0 ca ff 8c 	sub	r10,r8,-116
8000239c:	ca 8b       	rjmp	800022ec <dip204_init+0x10c>
  // Wait for command execution
  delay_ms(1);
  // Send "Display Clear" Command
  dip204_write_byte(0x01);
8000239e:	30 1c       	mov	r12,1
800023a0:	f0 1f 00 15 	mcall	800023f4 <dip204_init+0x214>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800023a4:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800023a8:	f0 ca fd c0 	sub	r10,r8,-576
800023ac:	cb 1b       	rjmp	8000230e <dip204_init+0x12e>
  // Wait for command execution
  delay_ms(5);
  // Send "Entry Mode Set Command: Increment Mode, Entire Shift off"
  dip204_write_byte(0x06);
800023ae:	30 6c       	mov	r12,6
800023b0:	f0 1f 00 11 	mcall	800023f4 <dip204_init+0x214>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800023b4:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800023b8:	f0 ca ff 8c 	sub	r10,r8,-116
800023bc:	cb ab       	rjmp	80002330 <dip204_init+0x150>
  // Wait for command execution
  delay_ms(1);
  dip204_wait_busy();
800023be:	f0 1f 00 0f 	mcall	800023f8 <dip204_init+0x218>
  // unselect chip
  dip204_unselect();
800023c2:	f0 1f 00 0f 	mcall	800023fc <dip204_init+0x21c>
}
800023c6:	2f cd       	sub	sp,-16
800023c8:	e3 cd 80 80 	ldm	sp++,r7,pc
800023cc:	00 00       	add	r0,r0
800023ce:	00 08       	add	r8,r0
800023d0:	80 00       	ld.sh	r0,r0[0x0]
800023d2:	24 5c       	sub	r12,69
800023d4:	80 00       	ld.sh	r0,r0[0x0]
800023d6:	27 28       	sub	r8,114
800023d8:	00 00       	add	r0,r0
800023da:	00 38       	cp.w	r8,r0
800023dc:	00 00       	add	r0,r0
800023de:	00 18       	sub	r8,r0
800023e0:	80 00       	ld.sh	r0,r0[0x0]
800023e2:	26 e0       	sub	r0,110
800023e4:	80 00       	ld.sh	r0,r0[0x0]
800023e6:	27 16       	sub	r6,113
800023e8:	80 00       	ld.sh	r0,r0[0x0]
800023ea:	24 fc       	sub	r12,79
800023ec:	80 00       	ld.sh	r0,r0[0x0]
800023ee:	24 e0       	sub	r0,78
800023f0:	80 00       	ld.sh	r0,r0[0x0]
800023f2:	20 08       	sub	r8,0
800023f4:	80 00       	ld.sh	r0,r0[0x0]
800023f6:	20 1c       	sub	r12,1
800023f8:	80 00       	ld.sh	r0,r0[0x0]
800023fa:	20 b0       	sub	r0,11
800023fc:	80 00       	ld.sh	r0,r0[0x0]
800023fe:	20 e4       	sub	r4,14

80002400 <adc_configure>:
	adc->mr |= 1 << AVR32_ADC_LOWRES_OFFSET;
#endif

	/* Set Sample/Hold time to max so that the ADC capacitor should be
	 * loaded entirely */
	adc->mr |= 0xF << AVR32_ADC_SHTIM_OFFSET;
80002400:	78 18       	ld.w	r8,r12[0x4]
80002402:	ea 18 0f 00 	orh	r8,0xf00
80002406:	99 18       	st.w	r12[0x4],r8

	/* Set Startup to max so that the ADC capacitor should be loaded
	 * entirely */
	adc->mr |= 0x1F << AVR32_ADC_STARTUP_OFFSET;
80002408:	78 18       	ld.w	r8,r12[0x4]
8000240a:	ea 18 00 1f 	orh	r8,0x1f
8000240e:	99 18       	st.w	r12[0x4],r8
}
80002410:	5e fc       	retal	r12

80002412 <adc_start>:
void adc_start(volatile avr32_adc_t *adc)
{
	Assert( adc != NULL );

	/* start conversion */
	adc->cr = AVR32_ADC_START_MASK;
80002412:	30 28       	mov	r8,2
80002414:	99 08       	st.w	r12[0x0],r8
}
80002416:	5e fc       	retal	r12

80002418 <adc_enable>:
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB ); /* check if channel exist
	                                              **/

	/* enable channel */
	adc->cher = (1 << channel);
80002418:	30 18       	mov	r8,1
8000241a:	f0 0b 09 48 	lsl	r8,r8,r11
8000241e:	99 48       	st.w	r12[0x10],r8
}
80002420:	5e fc       	retal	r12

80002422 <adc_check_eoc>:
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB ); /* check if channel exist
	                                              **/

	/* get SR register : EOC bit for channel */
	return ((adc->sr & (1 << channel)) ? true : false);
80002422:	78 78       	ld.w	r8,r12[0x1c]
80002424:	30 19       	mov	r9,1
80002426:	f2 0b 09 49 	lsl	r9,r9,r11
8000242a:	f3 e8 00 08 	and	r8,r9,r8
}
8000242e:	5f 1c       	srne	r12
80002430:	5e fc       	retal	r12
80002432:	d7 03       	nop

80002434 <adc_get_value>:
 * \param *adc Base address of the ADC
 * \param  channel   channel to handle (0 to 7)
 * \return The value acquired (unsigned long)
 */
uint32_t adc_get_value(volatile avr32_adc_t *adc, uint16_t channel)
{
80002434:	eb cd 40 e0 	pushm	r5-r7,lr
80002438:	18 97       	mov	r7,r12
8000243a:	16 95       	mov	r5,r11
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB );

	/* wait for end of conversion */
	while (adc_check_eoc(adc, channel) != true) {
8000243c:	ed db c0 10 	bfextu	r6,r11,0x0,0x10
80002440:	0c 9b       	mov	r11,r6
80002442:	0e 9c       	mov	r12,r7
80002444:	f0 1f 00 05 	mcall	80002458 <adc_get_value+0x24>
80002448:	cf c0       	breq	80002440 <adc_get_value+0xc>
	}

	return *((uint32_t *)((&(adc->cdr0)) + channel));
8000244a:	2d 07       	sub	r7,-48
8000244c:	5c 75       	castu.h	r5
}
8000244e:	ee 05 03 2c 	ld.w	r12,r7[r5<<0x2]
80002452:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002456:	00 00       	add	r0,r0
80002458:	80 00       	ld.sh	r0,r0[0x0]
8000245a:	24 22       	sub	r2,66

8000245c <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000245c:	f8 08 16 05 	lsr	r8,r12,0x5
80002460:	a9 68       	lsl	r8,0x8
80002462:	e0 28 f0 00 	sub	r8,61440

	/* Enable the correct function. */
	switch (function) {
80002466:	58 1b       	cp.w	r11,1
80002468:	c0 d0       	breq	80002482 <gpio_enable_module_pin+0x26>
8000246a:	c0 63       	brcs	80002476 <gpio_enable_module_pin+0x1a>
8000246c:	58 2b       	cp.w	r11,2
8000246e:	c1 00       	breq	8000248e <gpio_enable_module_pin+0x32>
80002470:	58 3b       	cp.w	r11,3
80002472:	c1 40       	breq	8000249a <gpio_enable_module_pin+0x3e>
80002474:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002476:	30 19       	mov	r9,1
80002478:	f2 0c 09 49 	lsl	r9,r9,r12
8000247c:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000247e:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80002480:	c1 28       	rjmp	800024a4 <gpio_enable_module_pin+0x48>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002482:	30 19       	mov	r9,1
80002484:	f2 0c 09 49 	lsl	r9,r9,r12
80002488:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000248a:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
8000248c:	c0 c8       	rjmp	800024a4 <gpio_enable_module_pin+0x48>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000248e:	30 19       	mov	r9,1
80002490:	f2 0c 09 49 	lsl	r9,r9,r12
80002494:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002496:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80002498:	c0 68       	rjmp	800024a4 <gpio_enable_module_pin+0x48>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000249a:	30 19       	mov	r9,1
8000249c:	f2 0c 09 49 	lsl	r9,r9,r12
800024a0:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800024a2:	91 99       	st.w	r8[0x24],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
800024a4:	30 19       	mov	r9,1
800024a6:	f2 0c 09 4c 	lsl	r12,r9,r12
800024aa:	91 2c       	st.w	r8[0x8],r12
800024ac:	5e fd       	retal	0
800024ae:	d7 03       	nop

800024b0 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
800024b0:	d4 21       	pushm	r4-r7,lr
800024b2:	18 97       	mov	r7,r12
800024b4:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800024b6:	58 0b       	cp.w	r11,0
800024b8:	c0 31       	brne	800024be <gpio_enable_module+0xe>
800024ba:	30 05       	mov	r5,0
800024bc:	c0 d8       	rjmp	800024d6 <gpio_enable_module+0x26>
800024be:	30 06       	mov	r6,0
800024c0:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800024c2:	6e 1b       	ld.w	r11,r7[0x4]
800024c4:	6e 0c       	ld.w	r12,r7[0x0]
800024c6:	f0 1f 00 06 	mcall	800024dc <gpio_enable_module+0x2c>
800024ca:	18 45       	or	r5,r12
		gpiomap++;
800024cc:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800024ce:	2f f6       	sub	r6,-1
800024d0:	0c 34       	cp.w	r4,r6
800024d2:	fe 9b ff f8 	brhi	800024c2 <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
800024d6:	0a 9c       	mov	r12,r5
800024d8:	d8 22       	popm	r4-r7,pc
800024da:	00 00       	add	r0,r0
800024dc:	80 00       	ld.sh	r0,r0[0x0]
800024de:	24 5c       	sub	r12,69

800024e0 <gpio_set_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800024e0:	f8 08 16 05 	lsr	r8,r12,0x5
800024e4:	a9 68       	lsl	r8,0x8
800024e6:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
800024ea:	30 19       	mov	r9,1
800024ec:	f2 0c 09 4c 	lsl	r12,r9,r12
800024f0:	f1 4c 00 54 	st.w	r8[84],r12
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
800024f4:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
800024f8:	91 1c       	st.w	r8[0x4],r12
}
800024fa:	5e fc       	retal	r12

800024fc <gpio_clr_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800024fc:	f8 08 16 05 	lsr	r8,r12,0x5
80002500:	a9 68       	lsl	r8,0x8
80002502:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80002506:	30 19       	mov	r9,1
80002508:	f2 0c 09 4c 	lsl	r12,r9,r12
8000250c:	f1 4c 00 58 	st.w	r8[88],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
80002510:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002514:	91 1c       	st.w	r8[0x4],r12
}
80002516:	5e fc       	retal	r12

80002518 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80002518:	c0 08       	rjmp	80002518 <_unhandled_interrupt>
8000251a:	d7 03       	nop

8000251c <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
8000251c:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80002520:	49 99       	lddpc	r9,80002584 <INTC_register_interrupt+0x68>
80002522:	f2 08 00 39 	add	r9,r9,r8<<0x3
80002526:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
8000252a:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
8000252c:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80002530:	58 0a       	cp.w	r10,0
80002532:	c0 91       	brne	80002544 <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002534:	49 59       	lddpc	r9,80002588 <INTC_register_interrupt+0x6c>
80002536:	49 6a       	lddpc	r10,8000258c <INTC_register_interrupt+0x70>
80002538:	12 1a       	sub	r10,r9
8000253a:	fe 79 08 00 	mov	r9,-63488
8000253e:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002542:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
80002544:	58 1a       	cp.w	r10,1
80002546:	c0 a1       	brne	8000255a <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80002548:	49 09       	lddpc	r9,80002588 <INTC_register_interrupt+0x6c>
8000254a:	49 2a       	lddpc	r10,80002590 <INTC_register_interrupt+0x74>
8000254c:	12 1a       	sub	r10,r9
8000254e:	bf aa       	sbr	r10,0x1e
80002550:	fe 79 08 00 	mov	r9,-63488
80002554:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002558:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
8000255a:	58 2a       	cp.w	r10,2
8000255c:	c0 a1       	brne	80002570 <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
8000255e:	48 b9       	lddpc	r9,80002588 <INTC_register_interrupt+0x6c>
80002560:	48 da       	lddpc	r10,80002594 <INTC_register_interrupt+0x78>
80002562:	12 1a       	sub	r10,r9
80002564:	bf ba       	sbr	r10,0x1f
80002566:	fe 79 08 00 	mov	r9,-63488
8000256a:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
8000256e:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80002570:	48 69       	lddpc	r9,80002588 <INTC_register_interrupt+0x6c>
80002572:	48 aa       	lddpc	r10,80002598 <INTC_register_interrupt+0x7c>
80002574:	12 1a       	sub	r10,r9
80002576:	ea 1a c0 00 	orh	r10,0xc000
8000257a:	fe 79 08 00 	mov	r9,-63488
8000257e:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002582:	5e fc       	retal	r12
80002584:	80 00       	ld.sh	r0,r0[0x0]
80002586:	30 00       	mov	r0,0
80002588:	80 00       	ld.sh	r0,r0[0x0]
8000258a:	2e 00       	sub	r0,-32
8000258c:	80 00       	ld.sh	r0,r0[0x0]
8000258e:	2f 04       	sub	r4,-16
80002590:	80 00       	ld.sh	r0,r0[0x0]
80002592:	2f 12       	sub	r2,-15
80002594:	80 00       	ld.sh	r0,r0[0x0]
80002596:	2f 20       	sub	r0,-14
80002598:	80 00       	ld.sh	r0,r0[0x0]
8000259a:	2f 2e       	sub	lr,-14

8000259c <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
8000259c:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
8000259e:	49 18       	lddpc	r8,800025e0 <INTC_init_interrupts+0x44>
800025a0:	e3 b8 00 01 	mtsr	0x4,r8
800025a4:	49 0e       	lddpc	lr,800025e4 <INTC_init_interrupts+0x48>
800025a6:	30 07       	mov	r7,0
800025a8:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
800025aa:	49 0c       	lddpc	r12,800025e8 <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800025ac:	49 05       	lddpc	r5,800025ec <INTC_init_interrupts+0x50>
800025ae:	10 15       	sub	r5,r8
800025b0:	fe 76 08 00 	mov	r6,-63488
800025b4:	c1 08       	rjmp	800025d4 <INTC_init_interrupts+0x38>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800025b6:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
800025b8:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800025ba:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
800025bc:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
800025c0:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800025c2:	10 3a       	cp.w	r10,r8
800025c4:	fe 9b ff fc 	brhi	800025bc <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800025c8:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
800025cc:	2f f7       	sub	r7,-1
800025ce:	2f 8e       	sub	lr,-8
800025d0:	59 47       	cp.w	r7,20
800025d2:	c0 50       	breq	800025dc <INTC_init_interrupts+0x40>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800025d4:	7c 08       	ld.w	r8,lr[0x0]
800025d6:	58 08       	cp.w	r8,0
800025d8:	ce f1       	brne	800025b6 <INTC_init_interrupts+0x1a>
800025da:	cf 7b       	rjmp	800025c8 <INTC_init_interrupts+0x2c>
800025dc:	d8 22       	popm	r4-r7,pc
800025de:	00 00       	add	r0,r0
800025e0:	80 00       	ld.sh	r0,r0[0x0]
800025e2:	2e 00       	sub	r0,-32
800025e4:	80 00       	ld.sh	r0,r0[0x0]
800025e6:	30 00       	mov	r0,0
800025e8:	80 00       	ld.sh	r0,r0[0x0]
800025ea:	25 18       	sub	r8,81
800025ec:	80 00       	ld.sh	r0,r0[0x0]
800025ee:	2f 04       	sub	r4,-16

800025f0 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
800025f0:	fe 78 08 00 	mov	r8,-63488
800025f4:	e0 69 00 83 	mov	r9,131
800025f8:	f2 0c 01 0c 	sub	r12,r9,r12
800025fc:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80002600:	f2 ca ff c0 	sub	r10,r9,-64
80002604:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002608:	58 08       	cp.w	r8,0
8000260a:	c0 21       	brne	8000260e <_get_interrupt_handler+0x1e>
8000260c:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
8000260e:	f0 08 12 00 	clz	r8,r8
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
80002612:	48 5a       	lddpc	r10,80002624 <_get_interrupt_handler+0x34>
80002614:	f4 09 00 39 	add	r9,r10,r9<<0x3
80002618:	f0 08 11 1f 	rsub	r8,r8,31
8000261c:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000261e:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80002622:	5e fc       	retal	r12
80002624:	80 00       	ld.sh	r0,r0[0x0]
80002626:	30 00       	mov	r0,0

80002628 <pm_set_osc0_mode>:
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002628:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
8000262a:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
8000262e:	99 a8       	st.w	r12[0x28],r8
}
80002630:	5e fc       	retal	r12
80002632:	d7 03       	nop

80002634 <pm_enable_osc0_crystal>:
  pm_set_osc0_mode(pm, AVR32_PM_OSCCTRL0_MODE_EXT_CLOCK);
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
80002634:	d4 01       	pushm	lr
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
80002636:	ec 5b bb 9f 	cp.w	r11,899999
8000263a:	e0 8b 00 04 	brhi	80002642 <pm_enable_osc0_crystal+0xe>
8000263e:	30 4b       	mov	r11,4
80002640:	c1 38       	rjmp	80002666 <pm_enable_osc0_crystal+0x32>
80002642:	e0 68 c6 bf 	mov	r8,50879
80002646:	ea 18 00 2d 	orh	r8,0x2d
8000264a:	10 3b       	cp.w	r11,r8
8000264c:	e0 8b 00 04 	brhi	80002654 <pm_enable_osc0_crystal+0x20>
80002650:	30 5b       	mov	r11,5
80002652:	c0 a8       	rjmp	80002666 <pm_enable_osc0_crystal+0x32>
80002654:	e0 68 12 00 	mov	r8,4608
80002658:	ea 18 00 7a 	orh	r8,0x7a
8000265c:	10 3b       	cp.w	r11,r8
8000265e:	f9 bb 03 06 	movlo	r11,6
80002662:	f9 bb 02 07 	movhs	r11,7
80002666:	f0 1f 00 02 	mcall	8000266c <pm_enable_osc0_crystal+0x38>
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
8000266a:	d8 02       	popm	pc
8000266c:	80 00       	ld.sh	r0,r0[0x0]
8000266e:	26 28       	sub	r8,98

80002670 <pm_enable_clk0_no_wait>:


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002670:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
80002672:	f1 db d1 03 	bfins	r8,r11,0x8,0x3
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80002676:	99 a8       	st.w	r12[0x28],r8

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
80002678:	78 08       	ld.w	r8,r12[0x0]
8000267a:	a3 a8       	sbr	r8,0x2
8000267c:	99 08       	st.w	r12[0x0],r8
}
8000267e:	5e fc       	retal	r12

80002680 <pm_wait_for_clk0_ready>:


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
80002680:	79 58       	ld.w	r8,r12[0x54]
80002682:	e2 18 00 80 	andl	r8,0x80,COH
80002686:	cf d0       	breq	80002680 <pm_wait_for_clk0_ready>
}
80002688:	5e fc       	retal	r12
8000268a:	d7 03       	nop

8000268c <pm_enable_clk0>:
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}


void pm_enable_clk0(volatile avr32_pm_t *pm, unsigned int startup)
{
8000268c:	eb cd 40 80 	pushm	r7,lr
80002690:	18 97       	mov	r7,r12
  pm_enable_clk0_no_wait(pm, startup);
80002692:	f0 1f 00 04 	mcall	800026a0 <pm_enable_clk0+0x14>
  pm_wait_for_clk0_ready(pm);
80002696:	0e 9c       	mov	r12,r7
80002698:	f0 1f 00 03 	mcall	800026a4 <pm_enable_clk0+0x18>
}
8000269c:	e3 cd 80 80 	ldm	sp++,r7,pc
800026a0:	80 00       	ld.sh	r0,r0[0x0]
800026a2:	26 70       	sub	r0,103
800026a4:	80 00       	ld.sh	r0,r0[0x0]
800026a6:	26 80       	sub	r0,104

800026a8 <pm_switch_to_clock>:


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
800026a8:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
800026aa:	f1 db d0 02 	bfins	r8,r11,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
800026ae:	99 08       	st.w	r12[0x0],r8
}
800026b0:	5e fc       	retal	r12
800026b2:	d7 03       	nop

800026b4 <pm_switch_to_osc0>:


void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
800026b4:	eb cd 40 c0 	pushm	r6-r7,lr
800026b8:	18 97       	mov	r7,r12
800026ba:	14 96       	mov	r6,r10
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
800026bc:	f0 1f 00 06 	mcall	800026d4 <pm_switch_to_osc0+0x20>
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
800026c0:	0c 9b       	mov	r11,r6
800026c2:	0e 9c       	mov	r12,r7
800026c4:	f0 1f 00 05 	mcall	800026d8 <pm_switch_to_osc0+0x24>
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
800026c8:	30 1b       	mov	r11,1
800026ca:	0e 9c       	mov	r12,r7
800026cc:	f0 1f 00 04 	mcall	800026dc <pm_switch_to_osc0+0x28>
}
800026d0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800026d4:	80 00       	ld.sh	r0,r0[0x0]
800026d6:	26 34       	sub	r4,99
800026d8:	80 00       	ld.sh	r0,r0[0x0]
800026da:	26 8c       	sub	r12,104
800026dc:	80 00       	ld.sh	r0,r0[0x0]
800026de:	26 a8       	sub	r8,106

800026e0 <pwm_channel_init>:

int pwm_channel_init( unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;

  if (pwm_channel == 0) // Null pointer.
800026e0:	58 0b       	cp.w	r11,0
800026e2:	c1 90       	breq	80002714 <pwm_channel_init+0x34>
    return PWM_INVALID_ARGUMENT;
  if (channel_id > AVR32_PWM_LINES_MSB) // Control input values.
800026e4:	58 6c       	cp.w	r12,6
800026e6:	e0 8b 00 17 	brhi	80002714 <pwm_channel_init+0x34>
    return PWM_INVALID_INPUT;

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode.
800026ea:	76 0a       	ld.w	r10,r11[0x0]
800026ec:	fe 78 30 00 	mov	r8,-53248
800026f0:	f8 c9 ff f0 	sub	r9,r12,-16
800026f4:	a5 79       	lsl	r9,0x5
800026f6:	f0 09 00 09 	add	r9,r8,r9
800026fa:	93 0a       	st.w	r9[0x0],r10
  pwm->channel[channel_id].cdty= pwm_channel->cdty; // Duty cycle, should be < CPRD.
800026fc:	76 19       	ld.w	r9,r11[0x4]
800026fe:	a5 7c       	lsl	r12,0x5
80002700:	f0 0c 00 0c 	add	r12,r8,r12
80002704:	f8 c8 fd fc 	sub	r8,r12,-516
80002708:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cprd= pwm_channel->cprd; // Channel period.
8000270a:	76 28       	ld.w	r8,r11[0x8]
8000270c:	f8 cc fd f8 	sub	r12,r12,-520
80002710:	99 08       	st.w	r12[0x0],r8
80002712:	5e fd       	retal	0

  return PWM_SUCCESS;
80002714:	5e ff       	retal	1

80002716 <pwm_start_channels>:
}


int pwm_start_channels(unsigned long channels_bitmask)
{
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
80002716:	18 98       	mov	r8,r12
80002718:	e0 18 ff 80 	andl	r8,0xff80
8000271c:	c0 20       	breq	80002720 <pwm_start_channels+0xa>
8000271e:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  AVR32_PWM.ena = channels_bitmask; // Enable channels.
80002720:	fe 78 30 00 	mov	r8,-53248
80002724:	91 1c       	st.w	r8[0x4],r12
80002726:	5e fd       	retal	0

80002728 <pwm_init>:


int pwm_init(const pwm_opt_t *opt)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80002728:	e1 b8 00 00 	mfsr	r8,0x0

  if (opt == 0 ) // Null pointer.
8000272c:	58 0c       	cp.w	r12,0
8000272e:	c0 21       	brne	80002732 <pwm_init+0xa>
80002730:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
80002732:	e6 18 00 01 	andh	r8,0x1,COH
80002736:	c0 91       	brne	80002748 <pwm_init+0x20>
80002738:	d3 03       	ssrf	0x10
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
8000273a:	fe 78 30 00 	mov	r8,-53248
8000273e:	37 f9       	mov	r9,127
80002740:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
80002742:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();
80002744:	d5 03       	csrf	0x10
80002746:	c0 68       	rjmp	80002752 <pwm_init+0x2a>
  if (opt == 0 ) // Null pointer.
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
80002748:	fe 78 30 00 	mov	r8,-53248
8000274c:	37 f9       	mov	r9,127
8000274e:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
80002750:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
80002752:	78 08       	ld.w	r8,r12[0x0]
80002754:	78 39       	ld.w	r9,r12[0xc]
80002756:	a9 69       	lsl	r9,0x8
80002758:	f3 e8 11 09 	or	r9,r9,r8<<0x10
8000275c:	78 18       	ld.w	r8,r12[0x4]
8000275e:	10 49       	or	r9,r8
80002760:	78 28       	ld.w	r8,r12[0x8]
80002762:	f3 e8 11 89 	or	r9,r9,r8<<0x18
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
80002766:	fe 78 30 00 	mov	r8,-53248
8000276a:	91 09       	st.w	r8[0x0],r9
8000276c:	5e fd       	retal	0

8000276e <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
8000276e:	f8 c8 00 01 	sub	r8,r12,1
80002772:	f0 0b 00 0b 	add	r11,r8,r11
80002776:	f6 0c 0d 0a 	divu	r10,r11,r12
8000277a:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
8000277c:	f4 c8 00 01 	sub	r8,r10,1
80002780:	e0 48 00 fe 	cp.w	r8,254
80002784:	e0 88 00 03 	brls	8000278a <getBaudDiv+0x1c>
80002788:	5e fe       	retal	-1
		return -1;
	}

	return baudDiv;
8000278a:	5c 8c       	casts.h	r12
}
8000278c:	5e fc       	retal	r12

8000278e <spi_initMaster>:
spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
8000278e:	f7 39 00 0d 	ld.ub	r9,r11[13]
80002792:	30 18       	mov	r8,1
80002794:	f0 09 18 00 	cp.b	r9,r8
80002798:	e0 88 00 04 	brls	800027a0 <spi_initMaster+0x12>
8000279c:	30 2c       	mov	r12,2
8000279e:	5e fc       	retal	r12
		return SPI_ERROR_ARGUMENT;
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
800027a0:	e0 68 00 80 	mov	r8,128
800027a4:	99 08       	st.w	r12[0x0],r8

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
800027a6:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.mstr = 1;
800027a8:	30 19       	mov	r9,1
800027aa:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
800027ae:	f7 39 00 0d 	ld.ub	r9,r11[13]
800027b2:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
	u_avr32_spi_mr.MR.llb = 0;
800027b6:	30 09       	mov	r9,0
800027b8:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
800027bc:	30 fa       	mov	r10,15
800027be:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
	spi->mr = u_avr32_spi_mr.mr;
800027c2:	99 18       	st.w	r12[0x4],r8
800027c4:	5e f9       	retal	r9

800027c6 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
800027c6:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
800027c8:	30 18       	mov	r8,1
800027ca:	f0 0b 18 00 	cp.b	r11,r8
800027ce:	5f be       	srhi	lr
800027d0:	f0 0a 18 00 	cp.b	r10,r8
800027d4:	5f b8       	srhi	r8
800027d6:	fd e8 10 08 	or	r8,lr,r8
800027da:	c0 30       	breq	800027e0 <spi_selectionMode+0x1a>
800027dc:	30 2c       	mov	r12,2
800027de:	d8 02       	popm	pc
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
800027e0:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
800027e2:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
800027e6:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
800027ea:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
800027ee:	99 18       	st.w	r12[0x4],r8
800027f0:	d8 0a       	popm	pc,r12=0

800027f2 <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
800027f2:	78 18       	ld.w	r8,r12[0x4]
800027f4:	ea 18 00 0f 	orh	r8,0xf
800027f8:	99 18       	st.w	r12[0x4],r8

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
800027fa:	78 18       	ld.w	r8,r12[0x4]
800027fc:	e2 18 00 04 	andl	r8,0x4,COH
80002800:	c0 f0       	breq	8000281e <spi_selectChip+0x2c>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
80002802:	30 e8       	mov	r8,14
80002804:	f0 0b 18 00 	cp.b	r11,r8
80002808:	e0 8b 00 19 	brhi	8000283a <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
8000280c:	78 18       	ld.w	r8,r12[0x4]
8000280e:	b1 6b       	lsl	r11,0x10
80002810:	ea 1b ff f0 	orh	r11,0xfff0
80002814:	e8 1b ff ff 	orl	r11,0xffff
80002818:	10 6b       	and	r11,r8
8000281a:	99 1b       	st.w	r12[0x4],r11
8000281c:	5e fd       	retal	0
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
8000281e:	30 38       	mov	r8,3
80002820:	f0 0b 18 00 	cp.b	r11,r8
80002824:	e0 8b 00 0b 	brhi	8000283a <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80002828:	78 18       	ld.w	r8,r12[0x4]
8000282a:	2f 0b       	sub	r11,-16
8000282c:	30 19       	mov	r9,1
8000282e:	f2 0b 09 4b 	lsl	r11,r9,r11
80002832:	5c db       	com	r11
80002834:	10 6b       	and	r11,r8
80002836:	99 1b       	st.w	r12[0x4],r11
80002838:	5e fd       	retal	0
8000283a:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
8000283c:	5e fc       	retal	r12

8000283e <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
8000283e:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80002842:	c0 58       	rjmp	8000284c <spi_unselectChip+0xe>
		if (!timeout--) {
80002844:	58 08       	cp.w	r8,0
80002846:	c0 21       	brne	8000284a <spi_unselectChip+0xc>
80002848:	5e ff       	retal	1
8000284a:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
8000284c:	78 49       	ld.w	r9,r12[0x10]
8000284e:	e2 19 02 00 	andl	r9,0x200,COH
80002852:	cf 90       	breq	80002844 <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80002854:	78 18       	ld.w	r8,r12[0x4]
80002856:	ea 18 00 0f 	orh	r8,0xf
8000285a:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
8000285c:	fc 18 01 00 	movh	r8,0x100
80002860:	99 08       	st.w	r12[0x0],r8
80002862:	5e fd       	retal	0

80002864 <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
80002864:	eb cd 40 f8 	pushm	r3-r7,lr
80002868:	18 95       	mov	r5,r12
8000286a:	16 97       	mov	r7,r11
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
8000286c:	f7 36 00 0c 	ld.ub	r6,r11[12]
80002870:	30 38       	mov	r8,3
80002872:	f0 06 18 00 	cp.b	r6,r8
80002876:	e0 8b 00 4d 	brhi	80002910 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
8000287a:	f7 34 00 0b 	ld.ub	r4,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
8000287e:	30 18       	mov	r8,1
80002880:	f0 04 18 00 	cp.b	r4,r8
80002884:	e0 8b 00 46 	brhi	80002910 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
80002888:	f7 33 00 08 	ld.ub	r3,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
8000288c:	30 78       	mov	r8,7
8000288e:	f0 03 18 00 	cp.b	r3,r8
80002892:	e0 88 00 3f 	brls	80002910 <spi_setupChipReg+0xac>
80002896:	31 08       	mov	r8,16
80002898:	f0 03 18 00 	cp.b	r3,r8
8000289c:	e0 8b 00 3a 	brhi	80002910 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
800028a0:	14 9b       	mov	r11,r10
800028a2:	6e 1c       	ld.w	r12,r7[0x4]
800028a4:	f0 1f 00 1d 	mcall	80002918 <spi_setupChipReg+0xb4>

	if (baudDiv < 0) {
800028a8:	c3 45       	brlt	80002910 <spi_setupChipReg+0xac>
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
800028aa:	30 08       	mov	r8,0
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
800028ac:	ec 09 16 01 	lsr	r9,r6,0x1
800028b0:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
800028b4:	ec 16 00 01 	eorl	r6,0x1
800028b8:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
800028bc:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
800028c0:	20 83       	sub	r3,8
800028c2:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
800028c6:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
800028ca:	ef 39 00 09 	ld.ub	r9,r7[9]
800028ce:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
800028d2:	ef 39 00 0a 	ld.ub	r9,r7[10]
800028d6:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8

	switch (options->reg) {
800028da:	0f 89       	ld.ub	r9,r7[0x0]
800028dc:	30 1a       	mov	r10,1
800028de:	f4 09 18 00 	cp.b	r9,r10
800028e2:	c0 e0       	breq	800028fe <spi_setupChipReg+0x9a>
800028e4:	c0 a3       	brcs	800028f8 <spi_setupChipReg+0x94>
800028e6:	30 2a       	mov	r10,2
800028e8:	f4 09 18 00 	cp.b	r9,r10
800028ec:	c0 c0       	breq	80002904 <spi_setupChipReg+0xa0>
800028ee:	30 3a       	mov	r10,3
800028f0:	f4 09 18 00 	cp.b	r9,r10
800028f4:	c0 e1       	brne	80002910 <spi_setupChipReg+0xac>
800028f6:	c0 a8       	rjmp	8000290a <spi_setupChipReg+0xa6>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
800028f8:	8b c8       	st.w	r5[0x30],r8
800028fa:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
800028fe:	8b d8       	st.w	r5[0x34],r8
80002900:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
80002904:	8b e8       	st.w	r5[0x38],r8
80002906:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
8000290a:	8b f8       	st.w	r5[0x3c],r8
8000290c:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;
80002910:	30 2c       	mov	r12,2
		}
	}
#endif

	return SPI_OK;
}
80002912:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80002916:	00 00       	add	r0,r0
80002918:	80 00       	ld.sh	r0,r0[0x0]
8000291a:	27 6e       	sub	lr,118

8000291c <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
8000291c:	30 18       	mov	r8,1
8000291e:	99 08       	st.w	r12[0x0],r8
}
80002920:	5e fc       	retal	r12

80002922 <spi_write>:
{
	return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
80002922:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80002926:	c0 58       	rjmp	80002930 <spi_write+0xe>
		if (!timeout--) {
80002928:	58 08       	cp.w	r8,0
8000292a:	c0 21       	brne	8000292e <spi_write+0xc>
8000292c:	5e ff       	retal	1
8000292e:	20 18       	sub	r8,1

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80002930:	78 49       	ld.w	r9,r12[0x10]
80002932:	e2 19 00 02 	andl	r9,0x2,COH
80002936:	cf 90       	breq	80002928 <spi_write+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002938:	5c 7b       	castu.h	r11
8000293a:	99 3b       	st.w	r12[0xc],r11
8000293c:	5e fd       	retal	0

8000293e <spi_read>:
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
8000293e:	e0 68 3a 98 	mov	r8,15000
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80002942:	c0 58       	rjmp	8000294c <spi_read+0xe>
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
80002944:	58 08       	cp.w	r8,0
80002946:	c0 21       	brne	8000294a <spi_read+0xc>
80002948:	5e ff       	retal	1
8000294a:	20 18       	sub	r8,1

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
8000294c:	78 49       	ld.w	r9,r12[0x10]
8000294e:	e2 19 02 01 	andl	r9,0x201,COH
80002952:	e0 49 02 01 	cp.w	r9,513
80002956:	cf 71       	brne	80002944 <spi_read+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
80002958:	78 28       	ld.w	r8,r12[0x8]
8000295a:	b6 08       	st.h	r11[0x0],r8
8000295c:	5e fd       	retal	0

8000295e <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
8000295e:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80002960:	f6 08 15 04 	lsl	r8,r11,0x4
80002964:	14 38       	cp.w	r8,r10
80002966:	f9 b8 08 10 	movls	r8,16
8000296a:	f9 b8 0b 08 	movhi	r8,8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
8000296e:	f0 0b 02 4b 	mul	r11,r8,r11
80002972:	f6 09 16 01 	lsr	r9,r11,0x1
80002976:	f2 0a 00 3a 	add	r10,r9,r10<<0x3
8000297a:	f4 0b 0d 0a 	divu	r10,r10,r11
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
8000297e:	f4 09 16 03 	lsr	r9,r10,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80002982:	f2 cb 00 01 	sub	r11,r9,1
80002986:	e0 4b ff fe 	cp.w	r11,65534
8000298a:	e0 88 00 03 	brls	80002990 <usart_set_async_baudrate+0x32>
8000298e:	da 0a       	popm	pc,r12=1
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80002990:	78 1b       	ld.w	r11,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80002992:	e8 6e 00 00 	mov	lr,524288
80002996:	59 08       	cp.w	r8,16
80002998:	fc 08 17 10 	movne	r8,lr
8000299c:	f9 b8 00 00 	moveq	r8,0
800029a0:	e4 1b ff f7 	andh	r11,0xfff7
800029a4:	e0 1b fe cf 	andl	r11,0xfecf
800029a8:	16 48       	or	r8,r11
800029aa:	99 18       	st.w	r12[0x4],r8
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
800029ac:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
800029b0:	f3 ea 11 09 	or	r9,r9,r10<<0x10
800029b4:	99 89       	st.w	r12[0x20],r9
800029b6:	d8 0a       	popm	pc,r12=0

800029b8 <usart_reset>:
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
800029b8:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
800029bc:	e6 18 00 01 	andh	r8,0x1,COH
800029c0:	c0 71       	brne	800029ce <usart_reset+0x16>
800029c2:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
800029c4:	3f f8       	mov	r8,-1
800029c6:	99 38       	st.w	r12[0xc],r8
  usart->csr;
800029c8:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
800029ca:	d5 03       	csrf	0x10
800029cc:	c0 48       	rjmp	800029d4 <usart_reset+0x1c>
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
  usart->idr = 0xFFFFFFFF;
800029ce:	3f f8       	mov	r8,-1
800029d0:	99 38       	st.w	r12[0xc],r8
  usart->csr;
800029d2:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
800029d4:	30 08       	mov	r8,0
800029d6:	99 18       	st.w	r12[0x4],r8
  usart->rtor = 0;
800029d8:	99 98       	st.w	r12[0x24],r8
  usart->ttgr = 0;
800029da:	99 a8       	st.w	r12[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
800029dc:	ea 68 61 0c 	mov	r8,680204
800029e0:	99 08       	st.w	r12[0x0],r8
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
800029e2:	5e fc       	retal	r12

800029e4 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
800029e4:	eb cd 40 e0 	pushm	r5-r7,lr
800029e8:	18 96       	mov	r6,r12
800029ea:	16 97       	mov	r7,r11
800029ec:	14 95       	mov	r5,r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
800029ee:	f0 1f 00 2f 	mcall	80002aa8 <usart_init_rs232+0xc4>

  // Check input values.
  if (!opt || // Null pointer.
800029f2:	58 07       	cp.w	r7,0
800029f4:	c5 80       	breq	80002aa4 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
800029f6:	0f c8       	ld.ub	r8,r7[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800029f8:	30 49       	mov	r9,4
800029fa:	f2 08 18 00 	cp.b	r8,r9
800029fe:	e0 88 00 53 	brls	80002aa4 <usart_init_rs232+0xc0>
80002a02:	30 99       	mov	r9,9
80002a04:	f2 08 18 00 	cp.b	r8,r9
80002a08:	e0 8b 00 4e 	brhi	80002aa4 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80002a0c:	0f d9       	ld.ub	r9,r7[0x5]
80002a0e:	30 78       	mov	r8,7
80002a10:	f0 09 18 00 	cp.b	r9,r8
80002a14:	e0 8b 00 48 	brhi	80002aa4 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
80002a18:	8e 39       	ld.sh	r9,r7[0x6]
80002a1a:	e0 68 01 01 	mov	r8,257
80002a1e:	f0 09 19 00 	cp.h	r9,r8
80002a22:	e0 8b 00 41 	brhi	80002aa4 <usart_init_rs232+0xc0>
      opt->channelmode > 3 ||
80002a26:	ef 39 00 08 	ld.ub	r9,r7[8]
80002a2a:	30 38       	mov	r8,3
80002a2c:	f0 09 18 00 	cp.b	r9,r8
80002a30:	e0 8b 00 3a 	brhi	80002aa4 <usart_init_rs232+0xc0>
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80002a34:	0a 9a       	mov	r10,r5
80002a36:	6e 0b       	ld.w	r11,r7[0x0]
80002a38:	0c 9c       	mov	r12,r6
80002a3a:	f0 1f 00 1d 	mcall	80002aac <usart_init_rs232+0xc8>
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002a3e:	58 1c       	cp.w	r12,1
80002a40:	c3 20       	breq	80002aa4 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
80002a42:	0f c8       	ld.ub	r8,r7[0x4]
80002a44:	30 99       	mov	r9,9
80002a46:	f2 08 18 00 	cp.b	r8,r9
80002a4a:	c0 51       	brne	80002a54 <usart_init_rs232+0x70>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80002a4c:	6c 18       	ld.w	r8,r6[0x4]
80002a4e:	b1 b8       	sbr	r8,0x11
80002a50:	8d 18       	st.w	r6[0x4],r8
80002a52:	c0 68       	rjmp	80002a5e <usart_init_rs232+0x7a>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80002a54:	6c 19       	ld.w	r9,r6[0x4]
80002a56:	20 58       	sub	r8,5
80002a58:	f3 e8 10 68 	or	r8,r9,r8<<0x6
80002a5c:	8d 18       	st.w	r6[0x4],r8
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80002a5e:	6c 19       	ld.w	r9,r6[0x4]
80002a60:	ef 3a 00 08 	ld.ub	r10,r7[8]
80002a64:	0f d8       	ld.ub	r8,r7[0x5]
80002a66:	a9 78       	lsl	r8,0x9
80002a68:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
80002a6c:	12 48       	or	r8,r9
80002a6e:	8d 18       	st.w	r6[0x4],r8
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80002a70:	8e 38       	ld.sh	r8,r7[0x6]
80002a72:	30 29       	mov	r9,2
80002a74:	f2 08 19 00 	cp.h	r8,r9
80002a78:	e0 88 00 09 	brls	80002a8a <usart_init_rs232+0xa6>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80002a7c:	6c 18       	ld.w	r8,r6[0x4]
80002a7e:	ad b8       	sbr	r8,0xd
80002a80:	8d 18       	st.w	r6[0x4],r8
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80002a82:	8e b8       	ld.uh	r8,r7[0x6]
80002a84:	20 28       	sub	r8,2
80002a86:	8d a8       	st.w	r6[0x28],r8
80002a88:	c0 68       	rjmp	80002a94 <usart_init_rs232+0xb0>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80002a8a:	6c 19       	ld.w	r9,r6[0x4]
80002a8c:	5c 78       	castu.h	r8
80002a8e:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
80002a92:	8d 18       	st.w	r6[0x4],r8

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80002a94:	6c 18       	ld.w	r8,r6[0x4]
80002a96:	e0 18 ff f0 	andl	r8,0xfff0
80002a9a:	8d 18       	st.w	r6[0x4],r8
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80002a9c:	35 08       	mov	r8,80
80002a9e:	8d 08       	st.w	r6[0x0],r8
80002aa0:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80002aa4:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80002aa8:	80 00       	ld.sh	r0,r0[0x0]
80002aaa:	29 b8       	sub	r8,-101
80002aac:	80 00       	ld.sh	r0,r0[0x0]
80002aae:	29 5e       	sub	lr,-107

80002ab0 <init_dbg_rs232_ex>:
  init_dbg_rs232_ex(DBG_USART_BAUDRATE, pba_hz);
}


void init_dbg_rs232_ex(unsigned long baudrate, long pba_hz)
{
80002ab0:	eb cd 40 80 	pushm	r7,lr
80002ab4:	20 3d       	sub	sp,12
80002ab6:	16 97       	mov	r7,r11
    .baudrate = baudrate,
    .charlength = 8,
    .paritytype = USART_NO_PARITY,
    .stopbits = USART_1_STOPBIT,
    .channelmode = USART_NORMAL_CHMODE
  };
80002ab8:	50 0c       	stdsp	sp[0x0],r12
80002aba:	30 88       	mov	r8,8
80002abc:	ba c8       	st.b	sp[0x4],r8
80002abe:	30 48       	mov	r8,4
80002ac0:	ba d8       	st.b	sp[0x5],r8
80002ac2:	30 08       	mov	r8,0
80002ac4:	ba 38       	st.h	sp[0x6],r8
80002ac6:	fb 68 00 08 	st.b	sp[8],r8

  // Setup GPIO for debug USART.
  gpio_enable_module(DBG_USART_GPIO_MAP,
80002aca:	30 2b       	mov	r11,2
80002acc:	48 6c       	lddpc	r12,80002ae4 <init_dbg_rs232_ex+0x34>
80002ace:	f0 1f 00 07 	mcall	80002ae8 <init_dbg_rs232_ex+0x38>
                     sizeof(DBG_USART_GPIO_MAP) / sizeof(DBG_USART_GPIO_MAP[0]));

  // Initialize it in RS232 mode.
  usart_init_rs232(DBG_USART, &dbg_usart_options, pba_hz);
80002ad2:	0e 9a       	mov	r10,r7
80002ad4:	1a 9b       	mov	r11,sp
80002ad6:	fe 7c 18 00 	mov	r12,-59392
80002ada:	f0 1f 00 05 	mcall	80002aec <init_dbg_rs232_ex+0x3c>
}
80002ade:	2f dd       	sub	sp,-12
80002ae0:	e3 cd 80 80 	ldm	sp++,r7,pc
80002ae4:	80 00       	ld.sh	r0,r0[0x0]
80002ae6:	30 a0       	mov	r0,10
80002ae8:	80 00       	ld.sh	r0,r0[0x0]
80002aea:	24 b0       	sub	r0,75
80002aec:	80 00       	ld.sh	r0,r0[0x0]
80002aee:	29 e4       	sub	r4,-98

80002af0 <init_dbg_rs232>:
//! ASCII representation of hexadecimal digits.
static const char HEX_DIGITS[16] = "0123456789ABCDEF";


void init_dbg_rs232(long pba_hz)
{
80002af0:	d4 01       	pushm	lr
  init_dbg_rs232_ex(DBG_USART_BAUDRATE, pba_hz);
80002af2:	18 9b       	mov	r11,r12
80002af4:	e0 6c e1 00 	mov	r12,57600
80002af8:	f0 1f 00 02 	mcall	80002b00 <init_dbg_rs232+0x10>
}
80002afc:	d8 02       	popm	pc
80002afe:	00 00       	add	r0,r0
80002b00:	80 00       	ld.sh	r0,r0[0x0]
80002b02:	2a b0       	sub	r0,-85

80002b04 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80002b04:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80002b08:	fe c0 fd 08 	sub	r0,pc,-760

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80002b0c:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
80002b10:	d5 53       	csrf	0x15
  cp      r0, r1
80002b12:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
80002b14:	31 81       	mov	r1,24
  lda.w   r2, _data_lma
80002b16:	02 30       	cp.w	r0,r1
idata_load_loop:
  ld.d    r4, r2++
80002b18:	c0 72       	brcc	80002b26 <idata_load_loop_end>
  st.d    r0++, r4
80002b1a:	fe c2 fa 0a 	sub	r2,pc,-1526

80002b1e <idata_load_loop>:
  cp      r0, r1
  brlo    idata_load_loop
80002b1e:	a5 05       	ld.d	r4,r2++
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80002b20:	a1 24       	st.d	r0++,r4
  lda.w   r1, _end
80002b22:	02 30       	cp.w	r0,r1
  cp      r0, r1
80002b24:	cf d3       	brcs	80002b1e <idata_load_loop>

80002b26 <idata_load_loop_end>:
  brhs    udata_clear_loop_end
80002b26:	31 80       	mov	r0,24
  mov     r2, 0
80002b28:	e0 61 01 30 	mov	r1,304
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
80002b2c:	02 30       	cp.w	r0,r1
  cp      r0, r1
80002b2e:	c0 62       	brcc	80002b3a <udata_clear_loop_end>
  brlo    udata_clear_loop
80002b30:	30 02       	mov	r2,0
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80002b32:	30 03       	mov	r3,0

80002b34 <udata_clear_loop>:
80002b34:	a1 22       	st.d	r0++,r2
80002b36:	02 30       	cp.w	r0,r1
80002b38:	cf e3       	brcs	80002b34 <udata_clear_loop>

80002b3a <udata_clear_loop_end>:
80002b3a:	fe cf fd ee 	sub	pc,pc,-530
80002b3e:	d7 03       	nop

80002b40 <usart_int_handler>:

__attribute__((__interrupt__))
static void usart_int_handler(void)
{
	// Si cette interruption est lancee par une reception (bit RXRDY=1)
	if (AVR32_USART1.csr & (AVR32_USART_CSR_RXRDY_MASK))
80002b40:	fe 78 18 00 	mov	r8,-59392
80002b44:	70 58       	ld.w	r8,r8[0x14]
80002b46:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002b4a:	c0 90       	breq	80002b5c <usart_int_handler+0x1c>
	{
		//Lire le char recu dans registre RHR, et le stocker dans un 32bit
		char_recu = (AVR32_USART1.rhr & AVR32_USART_RHR_RXCHR_MASK);
80002b4c:	fe 78 18 00 	mov	r8,-59392
80002b50:	70 69       	ld.w	r9,r8[0x18]
80002b52:	f3 d9 c0 09 	bfextu	r9,r9,0x0,0x9
80002b56:	48 88       	lddpc	r8,80002b74 <usart_int_handler+0x34>
80002b58:	91 09       	st.w	r8[0x0],r9
80002b5a:	d6 03       	rete
	}
	else if(AVR32_USART1.csr & (AVR32_USART_CSR_TXRDY_MASK)){
80002b5c:	fe 78 18 00 	mov	r8,-59392
80002b60:	70 58       	ld.w	r8,r8[0x14]
80002b62:	e2 18 00 02 	andl	r8,0x2,COH
80002b66:	c0 50       	breq	80002b70 <usart_int_handler+0x30>
		// get value for the potentiometer adc channel
		// Retransmettre un caractere vers le PC
		AVR32_USART1.idr = AVR32_USART_IDR_TXRDY_MASK;
80002b68:	30 29       	mov	r9,2
80002b6a:	fe 78 18 00 	mov	r8,-59392
80002b6e:	91 39       	st.w	r8[0xc],r9
80002b70:	d6 03       	rete
80002b72:	00 00       	add	r0,r0
80002b74:	00 00       	add	r0,r0
80002b76:	01 28       	ld.uh	r8,r0++

80002b78 <init_pot>:

	// Activer la source d'interrution du UART en reception (RXRDY)
	AVR32_USART1.ier = AVR32_USART_IER_RXRDY_MASK;
}

void init_pot(){
80002b78:	eb cd 40 80 	pushm	r7,lr

	// Assign the on-board sensors to their ADC channel.
	unsigned short adc_channel_pot = ADC_POTENTIOMETER_CHANNEL;

	// switch to oscillator 0
	pm_switch_to_osc0(&AVR32_PM, FOSC0, OSC0_STARTUP);
80002b7c:	30 3a       	mov	r10,3
80002b7e:	e0 6b 1b 00 	mov	r11,6912
80002b82:	ea 1b 00 b7 	orh	r11,0xb7
80002b86:	fe 7c 0c 00 	mov	r12,-62464
80002b8a:	f0 1f 00 0e 	mcall	80002bc0 <init_pot+0x48>

	// init debug serial line
	init_dbg_rs232(FOSC0);
80002b8e:	e0 6c 1b 00 	mov	r12,6912
80002b92:	ea 1c 00 b7 	orh	r12,0xb7
80002b96:	f0 1f 00 0c 	mcall	80002bc4 <init_pot+0x4c>

	// Assign and enable GPIO pins to the ADC function.
	gpio_enable_module(ADC_GPIO_MAP, sizeof(ADC_GPIO_MAP) / sizeof(ADC_GPIO_MAP[0]));
80002b9a:	30 1b       	mov	r11,1
80002b9c:	48 bc       	lddpc	r12,80002bc8 <init_pot+0x50>
80002b9e:	f0 1f 00 0c 	mcall	80002bcc <init_pot+0x54>

	// configure ADC
	// Lower the ADC clock to match the ADC characteristics (because we configured
	// the CPU clock to 12MHz, and the ADC clock characteristics are usually lower;
	// cf. the ADC Characteristic section in the datasheet).
	AVR32_ADC.mr |= 0x1 << AVR32_ADC_MR_PRESCAL_OFFSET;
80002ba2:	fe 77 3c 00 	mov	r7,-50176
80002ba6:	6e 18       	ld.w	r8,r7[0x4]
80002ba8:	a9 a8       	sbr	r8,0x8
80002baa:	8f 18       	st.w	r7[0x4],r8
	adc_configure(adc);
80002bac:	0e 9c       	mov	r12,r7
80002bae:	f0 1f 00 09 	mcall	80002bd0 <init_pot+0x58>

	// Enable the ADC channels.
	adc_enable(adc,adc_channel_pot);
80002bb2:	30 1b       	mov	r11,1
80002bb4:	0e 9c       	mov	r12,r7
80002bb6:	f0 1f 00 08 	mcall	80002bd4 <init_pot+0x5c>
}
80002bba:	e3 cd 80 80 	ldm	sp++,r7,pc
80002bbe:	00 00       	add	r0,r0
80002bc0:	80 00       	ld.sh	r0,r0[0x0]
80002bc2:	26 b4       	sub	r4,107
80002bc4:	80 00       	ld.sh	r0,r0[0x0]
80002bc6:	2a f0       	sub	r0,-81
80002bc8:	80 00       	ld.sh	r0,r0[0x0]
80002bca:	30 d0       	mov	r0,13
80002bcc:	80 00       	ld.sh	r0,r0[0x0]
80002bce:	24 b0       	sub	r0,75
80002bd0:	80 00       	ld.sh	r0,r0[0x0]
80002bd2:	24 00       	sub	r0,64
80002bd4:	80 00       	ld.sh	r0,r0[0x0]
80002bd6:	24 18       	sub	r8,65

80002bd8 <init_usart1>:
		// Retransmettre un caractere vers le PC
		AVR32_USART1.idr = AVR32_USART_IDR_TXRDY_MASK;
	}
}

void init_usart1(){
80002bd8:	d4 01       	pushm	lr
		{AVR32_USART1_RXD_0_0_PIN, AVR32_USART1_RXD_0_0_FUNCTION},
		{AVR32_USART1_TXD_0_0_PIN, AVR32_USART1_TXD_0_0_FUNCTION}
	};

	// Assigner les pins du GPIO a etre utiliser par le USART1.
	gpio_enable_module(USART_GPIO_MAP,sizeof(USART_GPIO_MAP) / sizeof(USART_GPIO_MAP[0]));
80002bda:	30 2b       	mov	r11,2
80002bdc:	48 bc       	lddpc	r12,80002c08 <init_usart1+0x30>
80002bde:	f0 1f 00 0c 	mcall	80002c0c <init_usart1+0x34>

	// Initialise le USART1 en mode seriel RS232, a 57600 BAUDS, a FOSC0=12MHz.
	init_dbg_rs232_ex(57600,FOSC0);
80002be2:	e0 6b 1b 00 	mov	r11,6912
80002be6:	ea 1b 00 b7 	orh	r11,0xb7
80002bea:	e0 6c e1 00 	mov	r12,57600
80002bee:	f0 1f 00 09 	mcall	80002c10 <init_usart1+0x38>

	// Enregister le USART interrupt handler au INTC, level INT0
	INTC_register_interrupt(&usart_int_handler, AVR32_USART1_IRQ, AVR32_INTC_INT0);
80002bf2:	30 0a       	mov	r10,0
80002bf4:	e0 6b 00 c0 	mov	r11,192
80002bf8:	48 7c       	lddpc	r12,80002c14 <init_usart1+0x3c>
80002bfa:	f0 1f 00 08 	mcall	80002c18 <init_usart1+0x40>

	// Activer la source d'interrution du UART en reception (RXRDY)
	AVR32_USART1.ier = AVR32_USART_IER_RXRDY_MASK;
80002bfe:	30 19       	mov	r9,1
80002c00:	fe 78 18 00 	mov	r8,-59392
80002c04:	91 29       	st.w	r8[0x8],r9
}
80002c06:	d8 02       	popm	pc
80002c08:	80 00       	ld.sh	r0,r0[0x0]
80002c0a:	30 fc       	mov	r12,15
80002c0c:	80 00       	ld.sh	r0,r0[0x0]
80002c0e:	24 b0       	sub	r0,75
80002c10:	80 00       	ld.sh	r0,r0[0x0]
80002c12:	2a b0       	sub	r0,-85
80002c14:	80 00       	ld.sh	r0,r0[0x0]
80002c16:	2b 40       	sub	r0,-76
80002c18:	80 00       	ld.sh	r0,r0[0x0]
80002c1a:	25 1c       	sub	r12,81

80002c1c <printLCDstring>:
	dip204_set_cursor_position(x,y);
	dip204_write_data(data);
	dip204_set_cursor_position(x,y);
}

void printLCDstring(char * data, int x, int y){
80002c1c:	eb cd 40 e0 	pushm	r5-r7,lr
80002c20:	18 95       	mov	r5,r12
	dip204_set_cursor_position(x,y);
80002c22:	ed da c0 08 	bfextu	r6,r10,0x0,0x8
80002c26:	ef db c0 08 	bfextu	r7,r11,0x0,0x8
80002c2a:	0c 9b       	mov	r11,r6
80002c2c:	0e 9c       	mov	r12,r7
80002c2e:	f0 1f 00 06 	mcall	80002c44 <printLCDstring+0x28>
	dip204_write_string(data);
80002c32:	0a 9c       	mov	r12,r5
80002c34:	f0 1f 00 05 	mcall	80002c48 <printLCDstring+0x2c>
	dip204_set_cursor_position(x,y);
80002c38:	0c 9b       	mov	r11,r6
80002c3a:	0e 9c       	mov	r12,r7
80002c3c:	f0 1f 00 02 	mcall	80002c44 <printLCDstring+0x28>
}
80002c40:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002c44:	80 00       	ld.sh	r0,r0[0x0]
80002c46:	21 50       	sub	r0,21
80002c48:	80 00       	ld.sh	r0,r0[0x0]
80002c4a:	20 f8       	sub	r8,15

80002c4c <printLCD>:

	// initialize LCD
	dip204_init(backlight_PWM, TRUE);	
}

void printLCD(U32 data, int x, int y){
80002c4c:	eb cd 40 e0 	pushm	r5-r7,lr
80002c50:	18 95       	mov	r5,r12
	dip204_set_cursor_position(x,y);
80002c52:	ed da c0 08 	bfextu	r6,r10,0x0,0x8
80002c56:	ef db c0 08 	bfextu	r7,r11,0x0,0x8
80002c5a:	0c 9b       	mov	r11,r6
80002c5c:	0e 9c       	mov	r12,r7
80002c5e:	f0 1f 00 07 	mcall	80002c78 <printLCD+0x2c>
	dip204_write_data(data);
80002c62:	f9 d5 c0 08 	bfextu	r12,r5,0x0,0x8
80002c66:	f0 1f 00 06 	mcall	80002c7c <printLCD+0x30>
	dip204_set_cursor_position(x,y);
80002c6a:	0c 9b       	mov	r11,r6
80002c6c:	0e 9c       	mov	r12,r7
80002c6e:	f0 1f 00 03 	mcall	80002c78 <printLCD+0x2c>
}
80002c72:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002c76:	00 00       	add	r0,r0
80002c78:	80 00       	ld.sh	r0,r0[0x0]
80002c7a:	21 50       	sub	r0,21
80002c7c:	80 00       	ld.sh	r0,r0[0x0]
80002c7e:	21 ac       	sub	r12,26

80002c80 <init_lcd>:
int sendPotData = 0;
volatile avr32_adc_t *adc = &AVR32_ADC; // ADC IP registers address
unsigned short adc_channel_pot = 1;


void init_lcd(){
80002c80:	eb cd 40 80 	pushm	r7,lr
80002c84:	20 4d       	sub	sp,16
		.spck_delay   = 0,
		.trans_delay  = 0,
		.stay_act     = 1,
		.spi_mode     = 0,
		.modfdis      = 1
	};
80002c86:	49 88       	lddpc	r8,80002ce4 <init_lcd+0x64>
80002c88:	1a 97       	mov	r7,sp
80002c8a:	f0 ea 00 00 	ld.d	r10,r8[0]
80002c8e:	fa eb 00 00 	st.d	sp[0],r10
80002c92:	f0 e8 00 08 	ld.d	r8,r8[8]
80002c96:	fa e9 00 08 	st.d	sp[8],r8
	
	
	gpio_enable_module(DIP204_SPI_GPIO_MAP,
80002c9a:	30 4b       	mov	r11,4
80002c9c:	49 3c       	lddpc	r12,80002ce8 <init_lcd+0x68>
80002c9e:	f0 1f 00 14 	mcall	80002cec <init_lcd+0x6c>
	sizeof(DIP204_SPI_GPIO_MAP) / sizeof(DIP204_SPI_GPIO_MAP[0]));

	// Initialize as master
	spi_initMaster(DIP204_SPI, &spiOptions);
80002ca2:	1a 9b       	mov	r11,sp
80002ca4:	fe 7c 28 00 	mov	r12,-55296
80002ca8:	f0 1f 00 12 	mcall	80002cf0 <init_lcd+0x70>

	// Set selection mode: variable_ps, pcs_decode, delay
	spi_selectionMode(DIP204_SPI, 0, 0, 0);
80002cac:	30 09       	mov	r9,0
80002cae:	12 9a       	mov	r10,r9
80002cb0:	12 9b       	mov	r11,r9
80002cb2:	fe 7c 28 00 	mov	r12,-55296
80002cb6:	f0 1f 00 10 	mcall	80002cf4 <init_lcd+0x74>

	// Enable SPI
	spi_enable(DIP204_SPI);
80002cba:	fe 7c 28 00 	mov	r12,-55296
80002cbe:	f0 1f 00 0f 	mcall	80002cf8 <init_lcd+0x78>

	// setup chip registers
	spi_setupChipReg(DIP204_SPI, &spiOptions, FOSC0);
80002cc2:	e0 6a 1b 00 	mov	r10,6912
80002cc6:	ea 1a 00 b7 	orh	r10,0xb7
80002cca:	1a 9b       	mov	r11,sp
80002ccc:	fe 7c 28 00 	mov	r12,-55296
80002cd0:	f0 1f 00 0b 	mcall	80002cfc <init_lcd+0x7c>

	// initialize delay driver
	delay_init( FOSC0 );

	// initialize LCD
	dip204_init(backlight_PWM, TRUE);	
80002cd4:	30 1b       	mov	r11,1
80002cd6:	16 9c       	mov	r12,r11
80002cd8:	f0 1f 00 0a 	mcall	80002d00 <init_lcd+0x80>
}
80002cdc:	2f cd       	sub	sp,-16
80002cde:	e3 cd 80 80 	ldm	sp++,r7,pc
80002ce2:	00 00       	add	r0,r0
80002ce4:	80 00       	ld.sh	r0,r0[0x0]
80002ce6:	30 ec       	mov	r12,14
80002ce8:	80 00       	ld.sh	r0,r0[0x0]
80002cea:	30 b0       	mov	r0,11
80002cec:	80 00       	ld.sh	r0,r0[0x0]
80002cee:	24 b0       	sub	r0,75
80002cf0:	80 00       	ld.sh	r0,r0[0x0]
80002cf2:	27 8e       	sub	lr,120
80002cf4:	80 00       	ld.sh	r0,r0[0x0]
80002cf6:	27 c6       	sub	r6,124
80002cf8:	80 00       	ld.sh	r0,r0[0x0]
80002cfa:	29 1c       	sub	r12,-111
80002cfc:	80 00       	ld.sh	r0,r0[0x0]
80002cfe:	28 64       	sub	r4,-122
80002d00:	80 00       	ld.sh	r0,r0[0x0]
80002d02:	21 e0       	sub	r0,30

80002d04 <initialization>:

	// Enable the ADC channels.
	adc_enable(adc,adc_channel_pot);
}

void initialization(){
80002d04:	d4 01       	pushm	lr
	char_recu = ' ';
80002d06:	32 09       	mov	r9,32
80002d08:	48 b8       	lddpc	r8,80002d34 <initialization+0x30>
80002d0a:	91 09       	st.w	r8[0x0],r9
	
	// Init le LCD avant de switch to osc0
	init_lcd();
80002d0c:	f0 1f 00 0b 	mcall	80002d38 <initialization+0x34>
	
	// Desactive les interruptions pendant la configuration.
	Disable_global_interrupt();
80002d10:	d3 03       	ssrf	0x10
	// WARNING: NE PEUT PLUS PRINT AU LCD AVEC LE SWITCH FUNCTION, Au boot, 115kHz, on doit passer au crystal FOSC0=12MHz avec le PM
	pm_switch_to_osc0(&AVR32_PM, FOSC0, OSC0_STARTUP);
80002d12:	30 3a       	mov	r10,3
80002d14:	e0 6b 1b 00 	mov	r11,6912
80002d18:	ea 1b 00 b7 	orh	r11,0xb7
80002d1c:	fe 7c 0c 00 	mov	r12,-62464
80002d20:	f0 1f 00 07 	mcall	80002d3c <initialization+0x38>
	// Preparatif pour l'enregistrement des interrupt handler du INTC.
	INTC_init_interrupts();
80002d24:	f0 1f 00 07 	mcall	80002d40 <initialization+0x3c>
	init_pot();
80002d28:	f0 1f 00 07 	mcall	80002d44 <initialization+0x40>
	init_usart1();
80002d2c:	f0 1f 00 07 	mcall	80002d48 <initialization+0x44>
	
	// Autoriser les interruptions.
	Enable_global_interrupt();
80002d30:	d5 03       	csrf	0x10
}
80002d32:	d8 02       	popm	pc
80002d34:	00 00       	add	r0,r0
80002d36:	01 28       	ld.uh	r8,r0++
80002d38:	80 00       	ld.sh	r0,r0[0x0]
80002d3a:	2c 80       	sub	r0,-56
80002d3c:	80 00       	ld.sh	r0,r0[0x0]
80002d3e:	26 b4       	sub	r4,107
80002d40:	80 00       	ld.sh	r0,r0[0x0]
80002d42:	25 9c       	sub	r12,89
80002d44:	80 00       	ld.sh	r0,r0[0x0]
80002d46:	2b 78       	sub	r8,-73
80002d48:	80 00       	ld.sh	r0,r0[0x0]
80002d4a:	2b d8       	sub	r8,-67

80002d4c <main>:
 
int main(void)
{
80002d4c:	eb cd 40 fc 	pushm	r2-r7,lr
	initialization();
80002d50:	f0 1f 00 16 	mcall	80002da8 <main+0x5c>
	
	printLCDstring("Prototype 1", 1, 1);
80002d54:	30 1a       	mov	r10,1
80002d56:	14 9b       	mov	r11,r10
80002d58:	49 5c       	lddpc	r12,80002dac <main+0x60>
80002d5a:	f0 1f 00 16 	mcall	80002db0 <main+0x64>
	printLCDstring("Recu: ", 1, 2);
80002d5e:	30 2a       	mov	r10,2
80002d60:	30 1b       	mov	r11,1
80002d62:	49 5c       	lddpc	r12,80002db4 <main+0x68>
80002d64:	f0 1f 00 13 	mcall	80002db0 <main+0x64>
	
	while (TRUE)  
	{
		printLCD(char_recu, 7, 2);
80002d68:	49 47       	lddpc	r7,80002db8 <main+0x6c>
80002d6a:	30 26       	mov	r6,2
80002d6c:	30 75       	mov	r5,7
		if(char_recu == 's'){
			adc_start(adc);
80002d6e:	49 44       	lddpc	r4,80002dbc <main+0x70>
			// Get value for the potentiometer adc channel
			AVR32_USART1.thr = ((adc_get_value(adc, adc_channel_pot) >> 2) & 0b11111110);//& AVR32_USART_THR_TXCHR_MASK;
80002d70:	49 43       	lddpc	r3,80002dc0 <main+0x74>
80002d72:	fe 72 18 00 	mov	r2,-59392
	printLCDstring("Prototype 1", 1, 1);
	printLCDstring("Recu: ", 1, 2);
	
	while (TRUE)  
	{
		printLCD(char_recu, 7, 2);
80002d76:	6e 0c       	ld.w	r12,r7[0x0]
80002d78:	0c 9a       	mov	r10,r6
80002d7a:	0a 9b       	mov	r11,r5
80002d7c:	f0 1f 00 12 	mcall	80002dc4 <main+0x78>
		if(char_recu == 's'){
80002d80:	6e 08       	ld.w	r8,r7[0x0]
80002d82:	e0 48 00 73 	cp.w	r8,115
80002d86:	c0 e1       	brne	80002da2 <main+0x56>
			adc_start(adc);
80002d88:	68 0c       	ld.w	r12,r4[0x0]
80002d8a:	f0 1f 00 10 	mcall	80002dc8 <main+0x7c>
			// Get value for the potentiometer adc channel
			AVR32_USART1.thr = ((adc_get_value(adc, adc_channel_pot) >> 2) & 0b11111110);//& AVR32_USART_THR_TXCHR_MASK;
80002d8e:	86 8b       	ld.uh	r11,r3[0x0]
80002d90:	68 0c       	ld.w	r12,r4[0x0]
80002d92:	f0 1f 00 0f 	mcall	80002dcc <main+0x80>
80002d96:	f8 08 16 02 	lsr	r8,r12,0x2
80002d9a:	e2 18 00 fe 	andl	r8,0xfe,COH
80002d9e:	85 78       	st.w	r2[0x1c],r8
80002da0:	ce bb       	rjmp	80002d76 <main+0x2a>
		}
		else if(char_recu == 'x'){
80002da2:	6e 08       	ld.w	r8,r7[0x0]
80002da4:	ce 9b       	rjmp	80002d76 <main+0x2a>
80002da6:	00 00       	add	r0,r0
80002da8:	80 00       	ld.sh	r0,r0[0x0]
80002daa:	2d 04       	sub	r4,-48
80002dac:	80 00       	ld.sh	r0,r0[0x0]
80002dae:	30 d8       	mov	r8,13
80002db0:	80 00       	ld.sh	r0,r0[0x0]
80002db2:	2c 1c       	sub	r12,-63
80002db4:	80 00       	ld.sh	r0,r0[0x0]
80002db6:	30 e4       	mov	r4,14
80002db8:	00 00       	add	r0,r0
80002dba:	01 28       	ld.uh	r8,r0++
80002dbc:	00 00       	add	r0,r0
80002dbe:	00 10       	sub	r0,r0
80002dc0:	00 00       	add	r0,r0
80002dc2:	00 0c       	add	r12,r0
80002dc4:	80 00       	ld.sh	r0,r0[0x0]
80002dc6:	2c 4c       	sub	r12,-60
80002dc8:	80 00       	ld.sh	r0,r0[0x0]
80002dca:	24 12       	sub	r2,65
80002dcc:	80 00       	ld.sh	r0,r0[0x0]
80002dce:	24 34       	sub	r4,67

Disassembly of section .exception:

80002e00 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80002e00:	c0 08       	rjmp	80002e00 <_evba>
	...

80002e04 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80002e04:	c0 08       	rjmp	80002e04 <_handle_TLB_Multiple_Hit>
	...

80002e08 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80002e08:	c0 08       	rjmp	80002e08 <_handle_Bus_Error_Data_Fetch>
	...

80002e0c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
80002e0c:	c0 08       	rjmp	80002e0c <_handle_Bus_Error_Instruction_Fetch>
	...

80002e10 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80002e10:	c0 08       	rjmp	80002e10 <_handle_NMI>
	...

80002e14 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80002e14:	c0 08       	rjmp	80002e14 <_handle_Instruction_Address>
	...

80002e18 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80002e18:	c0 08       	rjmp	80002e18 <_handle_ITLB_Protection>
	...

80002e1c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
80002e1c:	c0 08       	rjmp	80002e1c <_handle_Breakpoint>
	...

80002e20 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80002e20:	c0 08       	rjmp	80002e20 <_handle_Illegal_Opcode>
	...

80002e24 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80002e24:	c0 08       	rjmp	80002e24 <_handle_Unimplemented_Instruction>
	...

80002e28 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80002e28:	c0 08       	rjmp	80002e28 <_handle_Privilege_Violation>
	...

80002e2c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
80002e2c:	c0 08       	rjmp	80002e2c <_handle_Floating_Point>
	...

80002e30 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80002e30:	c0 08       	rjmp	80002e30 <_handle_Coprocessor_Absent>
	...

80002e34 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80002e34:	c0 08       	rjmp	80002e34 <_handle_Data_Address_Read>
	...

80002e38 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80002e38:	c0 08       	rjmp	80002e38 <_handle_Data_Address_Write>
	...

80002e3c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
80002e3c:	c0 08       	rjmp	80002e3c <_handle_DTLB_Protection_Read>
	...

80002e40 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80002e40:	c0 08       	rjmp	80002e40 <_handle_DTLB_Protection_Write>
	...

80002e44 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80002e44:	c0 08       	rjmp	80002e44 <_handle_DTLB_Modified>
	...

80002e50 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80002e50:	c0 08       	rjmp	80002e50 <_handle_ITLB_Miss>
	...

80002e60 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80002e60:	c0 08       	rjmp	80002e60 <_handle_DTLB_Miss_Read>
	...

80002e70 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80002e70:	c0 08       	rjmp	80002e70 <_handle_DTLB_Miss_Write>
	...

80002f00 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80002f00:	c0 08       	rjmp	80002f00 <_handle_Supervisor_Call>
80002f02:	d7 03       	nop

80002f04 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002f04:	30 0c       	mov	r12,0
80002f06:	fe b0 fb 75 	rcall	800025f0 <_get_interrupt_handler>
80002f0a:	58 0c       	cp.w	r12,0
80002f0c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80002f10:	d6 03       	rete

80002f12 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002f12:	30 1c       	mov	r12,1
80002f14:	fe b0 fb 6e 	rcall	800025f0 <_get_interrupt_handler>
80002f18:	58 0c       	cp.w	r12,0
80002f1a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80002f1e:	d6 03       	rete

80002f20 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002f20:	30 2c       	mov	r12,2
80002f22:	fe b0 fb 67 	rcall	800025f0 <_get_interrupt_handler>
80002f26:	58 0c       	cp.w	r12,0
80002f28:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80002f2c:	d6 03       	rete

80002f2e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002f2e:	30 3c       	mov	r12,3
80002f30:	fe b0 fb 60 	rcall	800025f0 <_get_interrupt_handler>
80002f34:	58 0c       	cp.w	r12,0
80002f36:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80002f3a:	d6 03       	rete
80002f3c:	d7 03       	nop
80002f3e:	d7 03       	nop
80002f40:	d7 03       	nop
80002f42:	d7 03       	nop
80002f44:	d7 03       	nop
80002f46:	d7 03       	nop
80002f48:	d7 03       	nop
80002f4a:	d7 03       	nop
80002f4c:	d7 03       	nop
80002f4e:	d7 03       	nop
80002f50:	d7 03       	nop
80002f52:	d7 03       	nop
80002f54:	d7 03       	nop
80002f56:	d7 03       	nop
80002f58:	d7 03       	nop
80002f5a:	d7 03       	nop
80002f5c:	d7 03       	nop
80002f5e:	d7 03       	nop
80002f60:	d7 03       	nop
80002f62:	d7 03       	nop
80002f64:	d7 03       	nop
80002f66:	d7 03       	nop
80002f68:	d7 03       	nop
80002f6a:	d7 03       	nop
80002f6c:	d7 03       	nop
80002f6e:	d7 03       	nop
80002f70:	d7 03       	nop
80002f72:	d7 03       	nop
80002f74:	d7 03       	nop
80002f76:	d7 03       	nop
80002f78:	d7 03       	nop
80002f7a:	d7 03       	nop
80002f7c:	d7 03       	nop
80002f7e:	d7 03       	nop
80002f80:	d7 03       	nop
80002f82:	d7 03       	nop
80002f84:	d7 03       	nop
80002f86:	d7 03       	nop
80002f88:	d7 03       	nop
80002f8a:	d7 03       	nop
80002f8c:	d7 03       	nop
80002f8e:	d7 03       	nop
80002f90:	d7 03       	nop
80002f92:	d7 03       	nop
80002f94:	d7 03       	nop
80002f96:	d7 03       	nop
80002f98:	d7 03       	nop
80002f9a:	d7 03       	nop
80002f9c:	d7 03       	nop
80002f9e:	d7 03       	nop
80002fa0:	d7 03       	nop
80002fa2:	d7 03       	nop
80002fa4:	d7 03       	nop
80002fa6:	d7 03       	nop
80002fa8:	d7 03       	nop
80002faa:	d7 03       	nop
80002fac:	d7 03       	nop
80002fae:	d7 03       	nop
80002fb0:	d7 03       	nop
80002fb2:	d7 03       	nop
80002fb4:	d7 03       	nop
80002fb6:	d7 03       	nop
80002fb8:	d7 03       	nop
80002fba:	d7 03       	nop
80002fbc:	d7 03       	nop
80002fbe:	d7 03       	nop
80002fc0:	d7 03       	nop
80002fc2:	d7 03       	nop
80002fc4:	d7 03       	nop
80002fc6:	d7 03       	nop
80002fc8:	d7 03       	nop
80002fca:	d7 03       	nop
80002fcc:	d7 03       	nop
80002fce:	d7 03       	nop
80002fd0:	d7 03       	nop
80002fd2:	d7 03       	nop
80002fd4:	d7 03       	nop
80002fd6:	d7 03       	nop
80002fd8:	d7 03       	nop
80002fda:	d7 03       	nop
80002fdc:	d7 03       	nop
80002fde:	d7 03       	nop
80002fe0:	d7 03       	nop
80002fe2:	d7 03       	nop
80002fe4:	d7 03       	nop
80002fe6:	d7 03       	nop
80002fe8:	d7 03       	nop
80002fea:	d7 03       	nop
80002fec:	d7 03       	nop
80002fee:	d7 03       	nop
80002ff0:	d7 03       	nop
80002ff2:	d7 03       	nop
80002ff4:	d7 03       	nop
80002ff6:	d7 03       	nop
80002ff8:	d7 03       	nop
80002ffa:	d7 03       	nop
80002ffc:	d7 03       	nop
80002ffe:	d7 03       	nop
